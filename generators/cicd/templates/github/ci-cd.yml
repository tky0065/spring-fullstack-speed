name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        <% environments.forEach(function(env) { %>
          - <%= env %>
        <% }); %>

jobs:
<% if (stages.includes('static-analysis')) { %>
  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          <% if (caching) { %>cache: maven<% } %>
  <% if (sonarqube) { %>
      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: SonarQube Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=${GITHUB_REPOSITORY##*/}
  <% } else { %>
      - name: Run code quality checks
        run: mvn -B clean verify
  <% } %>
<% } %>

<% if (stages.includes('tests')) { %>
  test:
    name: Tests
    <% if (stages.includes('static-analysis')) { %>
    needs: static-analysis
    <% } %>
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          <% if (caching) { %>cache: maven<% } %>

      - name: Run tests
        run: mvn -B test

      <% if (qualityGates.includes('test-coverage')) { %>
      - name: Generate test coverage report
        run: mvn -B verify -Pcoverage

      - name: Check test coverage threshold
        run: |
          COVERAGE=$(cat target/site/jacoco/index.html | grep -o 'Total[^%]*%' | grep -o '[0-9]*%' | grep -o '[0-9]*')
          if [ "$COVERAGE" -lt "80" ]; then
            echo "Test coverage is below 80%: $COVERAGE%"
            exit 1
          else
            echo "Test coverage is $COVERAGE%"
          fi
      <% } %>
<% } %>

<% if (stages.includes('build')) { %>
  build:
    name: Build
    <% if (stages.includes('tests')) { %>
    needs: test
    <% } else if (stages.includes('static-analysis')) { %>
    needs: static-analysis
    <% } %>
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          <% if (caching) { %>cache: maven<% } %>

      - name: Build with Maven
        run: mvn -B clean package -DskipTests

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-jar
          path: target/*.jar
          retention-days: 5
<% } %>

<% if (stages.includes('docker')) { %>
  docker:
    name: Build and Push Docker Image
    <% if (stages.includes('build')) { %>
    needs: build
    <% } else if (stages.includes('tests')) { %>
    needs: test
    <% } else if (stages.includes('static-analysis')) { %>
    needs: static-analysis
    <% } %>
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      <% if (stages.includes('build')) { %>
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: app-jar
          path: target/
      <% } else { %>
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          <% if (caching) { %>cache: maven<% } %>

      - name: Build with Maven
        run: mvn -B clean package -DskipTests
      <% } %>

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          <% if (dockerRegistry) { %>
          registry: <%= dockerRegistry %>
          <% } %>
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: <% if (dockerRegistry) { %><%= dockerRegistry %>/<% } %>${{ github.repository }}
          tags: |
            type=sha,format=short
            type=ref,event=branch
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') || github.ref == format('refs/heads/{0}', 'master') }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
<% } %>

<% if (stages.includes('deploy')) { %>
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'dev' }}
    <% if (stages.includes('docker')) { %>
    needs: docker
    <% } else if (stages.includes('build')) { %>
    needs: build
    <% } else if (stages.includes('tests')) { %>
    needs: test
    <% } else if (stages.includes('static-analysis')) { %>
    needs: static-analysis
    <% } %>
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - uses: actions/checkout@v3

      <% if (deploymentStrategy === 'blue-green') { %>
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Blue/Green Deployment
        run: |
          # Configurer kubeconfig
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Afficher infos environnement pour débogage
          echo "Déploiement vers ${{ github.event.inputs.environment || 'dev' }}"
          
          # Variables
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          IMAGE="<% if (dockerRegistry) { %><%= dockerRegistry %>/<% } %>${{ github.repository }}:sha-$(git rev-parse --short HEAD)"
          
          # Appliquer configuration blue/green
          sed -i "s|IMAGE_PLACEHOLDER|$IMAGE|g" k8s/$ENV/deployment-blue.yaml
          kubectl apply -f k8s/$ENV/deployment-blue.yaml
          
          # Attendre que le déploiement blue soit prêt
          kubectl rollout status deployment/app-blue -n $ENV
          
          # Basculer le trafic
          kubectl apply -f k8s/$ENV/service-switch-to-blue.yaml
          
          # Une fois stable, mettre à jour green
          sed -i "s|IMAGE_PLACEHOLDER|$IMAGE|g" k8s/$ENV/deployment-green.yaml
          kubectl apply -f k8s/$ENV/deployment-green.yaml
      <% } else if (deploymentStrategy === 'canary') { %>
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Canary Deployment
        run: |
          # Configurer kubeconfig
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Variables
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          IMAGE="<% if (dockerRegistry) { %><%= dockerRegistry %>/<% } %>${{ github.repository }}:sha-$(git rev-parse --short HEAD)"
          
          # Déployer la version canary (10% du trafic)
          sed -i "s|IMAGE_PLACEHOLDER|$IMAGE|g" k8s/$ENV/deployment-canary.yaml
          kubectl apply -f k8s/$ENV/deployment-canary.yaml
          kubectl apply -f k8s/$ENV/service-canary.yaml
          
          # Attendre 5 minutes pour évaluer la stabilité
          echo "Attente de 5 minutes pour évaluer la version canary..."
          sleep 300
          
          # Vérifier les métriques (exemple simulé)
          ERRORS=$(kubectl logs -l app=canary -n $ENV | grep ERROR | wc -l)
          if [ "$ERRORS" -gt "5" ]; then
            echo "Trop d'erreurs dans la version canary, rollback..."
            kubectl delete -f k8s/$ENV/deployment-canary.yaml
            exit 1
          fi
          
          # Promouvoir canary à la production complète
          sed -i "s|IMAGE_PLACEHOLDER|$IMAGE|g" k8s/$ENV/deployment-production.yaml
          kubectl apply -f k8s/$ENV/deployment-production.yaml
          kubectl apply -f k8s/$ENV/service-production.yaml
          
          # Supprimer la version canary
          kubectl delete -f k8s/$ENV/deployment-canary.yaml
      <% } else { %>
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Simple Deployment
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        run: |
          # Préparer config de déploiement
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          IMAGE="<% if (dockerRegistry) { %><%= dockerRegistry %>/<% } %>${{ github.repository }}:sha-$(git rev-parse --short HEAD)"
          
          # Déployer via SSH
          ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << EOF
            # Tirer la nouvelle image
            docker pull $IMAGE
            
            # Stopper le container actuel s'il existe
            docker stop app-$ENV || true
            docker rm app-$ENV || true
            
            # Démarrer le nouveau container
            docker run -d --name app-$ENV \\
              --restart unless-stopped \\
              -p 8080:8080 \\
              -e SPRING_PROFILES_ACTIVE=$ENV \\
              $IMAGE
          EOF
      <% } %>

      - name: Verify deployment
        run: |
          # Attendre que l'application démarre
          sleep 30
          
          # Vérifier que l'application répond
          curl -f https://${{ secrets.APP_URL }}/actuator/health || exit 1
<% } %>

<% if (stages.includes('notify')) { %>
  notify:
    name: Send Notifications
    <% if (stages.includes('deploy')) { %>
    needs: [deploy]
    if: always()
    <% } else if (stages.includes('docker')) { %>
    needs: [docker]
    if: always()
    <% } else if (stages.includes('build')) { %>
    needs: [build]
    if: always()
    <% } else if (stages.includes('tests')) { %>
    needs: [test]
    if: always()
    <% } else if (stages.includes('static-analysis')) { %>
    needs: [static-analysis]
    if: always()
    <% } %>
    runs-on: ubuntu-latest
    steps:
      <% if (notifications.includes('email')) { %>
      - name: Send email notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: ${{ job.status == 'success' && 'CI Pipeline Succeeded' || 'CI Pipeline Failed' }}
          body: |
            CI/CD Pipeline for ${{ github.repository }} ${{ job.status }}.
            
            Commit: ${{ github.event.head_commit.message }}
            Author: ${{ github.event.head_commit.author.name }}
            Repository: ${{ github.repository }}
            
            See details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.MAIL_RECIPIENTS }}
          from: GitHub Actions
      <% } %>
      
      <% if (notifications.includes('slack')) { %>
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "${{ job.status == 'success' && 'CI Pipeline Succeeded ✅' || 'CI Pipeline Failed ❌' }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*${{ job.status == 'success' && 'CI Pipeline Succeeded ✅' || 'CI Pipeline Failed ❌' }}*\n${{ github.repository }} - <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n${{ github.event.head_commit.message }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n${{ github.event.head_commit.author.name }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      <% } %>
      
      <% if (notifications.includes('discord')) { %>
      - name: Send Discord notification
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          title: "CI/CD Pipeline"
          description: "${{ github.repository }} - ${{ github.event.head_commit.message }}"
          url: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          username: GitHub Actions
      <% } %>
<% } %>
