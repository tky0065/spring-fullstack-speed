package <%= packageName %>.notification.controller;

import <%= packageName %>.notification.dto.PushNotificationDTO;
import <%= packageName %>.notification.service.PushNotificationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

/**
 * Contrôleur REST pour la gestion des notifications push
 */
@RestController
@RequestMapping("/api/push-notifications")
public class PushNotificationController {

    @Autowired
    private PushNotificationService pushNotificationService;

    /**
     * Envoie une notification push à un appareil spécifique
     *
     * @param notification DTO contenant les informations de la notification
     * @return ResponseEntity avec le statut de l'envoi
     */
    @PostMapping("/send")
    public ResponseEntity<Boolean> sendPushNotification(@RequestBody PushNotificationDTO notification) {
        boolean sent = pushNotificationService.sendToDevice(notification);
        return ResponseEntity.ok(sent);
    }

    /**
     * Envoie une notification push à un sujet spécifique
     *
     * @param notification DTO contenant les informations de la notification
     * @param topic Le sujet cible
     * @return ResponseEntity avec le statut de l'envoi
     */
    @PostMapping("/topic/{topic}")
    public ResponseEntity<Boolean> sendToTopic(
            @RequestBody PushNotificationDTO notification,
            @PathVariable String topic) {
        boolean sent = pushNotificationService.sendToTopic(notification, topic);
        return ResponseEntity.ok(sent);
    }

    /**
     * Abonne un appareil à un sujet
     *
     * @param token Le token de l'appareil
     * @param topic Le sujet auquel s'abonner
     * @return ResponseEntity avec le statut de l'abonnement
     */
    @PostMapping("/subscribe")
    public ResponseEntity<Boolean> subscribe(
            @RequestParam String token,
            @RequestParam String topic) {
        boolean subscribed = pushNotificationService.subscribeToTopic(token, topic);
        return ResponseEntity.ok(subscribed);
    }

    /**
     * Désabonne un appareil d'un sujet
     *
     * @param token Le token de l'appareil
     * @param topic Le sujet duquel se désabonner
     * @return ResponseEntity avec le statut du désabonnement
     */
    @PostMapping("/unsubscribe")
    public ResponseEntity<Boolean> unsubscribe(
            @RequestParam String token,
            @RequestParam String topic) {
        boolean unsubscribed = pushNotificationService.unsubscribeFromTopic(token, topic);
        return ResponseEntity.ok(unsubscribed);
    }
}
