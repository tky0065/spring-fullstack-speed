package <%= packageName %>.notification.service;

import <%= packageName %>.notification.dto.EmailDTO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;
<% if (asyncNotifications) { %>
import org.springframework.scheduling.annotation.Async;
<% } %>
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.mail.internet.MimeMessage;
import java.io.File;

/**
 * Implémentation du service d'emails utilisant le SMTP standard de Spring
 */
@Service
public class SmtpEmailService implements EmailService {

    private final Logger log = LoggerFactory.getLogger(SmtpEmailService.class);

    @Autowired
    private JavaMailSender mailSender;

    @Value("${spring.mail.username:noreply@example.com}")
    private String defaultFrom;

    <% if (useTemplating) { %>
    @Autowired
    private EmailTemplateService templateService;
    <% } %>

    @Override
    <% if (asyncNotifications) { %>@Async<% } %>
    public void sendEmail(String to, String subject, String text, boolean isHtml) {
        try {
            if (isHtml) {
                MimeMessage message = mailSender.createMimeMessage();
                MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");
                helper.setTo(to);
                helper.setFrom(defaultFrom);
                helper.setSubject(subject);
                helper.setText(text, true);
                mailSender.send(message);
            } else {
                SimpleMailMessage message = new SimpleMailMessage();
                message.setTo(to);
                message.setFrom(defaultFrom);
                message.setSubject(subject);
                message.setText(text);
                mailSender.send(message);
            }
            log.info("Email envoyé avec succès à {}", to);
        } catch (Exception e) {
            log.error("Erreur lors de l'envoi de l'email à {}: {}", to, e.getMessage(), e);
            throw new RuntimeException("Impossible d'envoyer l'email", e);
        }
    }

    @Override
    <% if (asyncNotifications) { %>@Async<% } %>
    public void sendEmailWithAttachments(String to, String subject, String text, boolean isHtml, String[] attachments) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");
            helper.setTo(to);
            helper.setFrom(defaultFrom);
            helper.setSubject(subject);
            helper.setText(text, isHtml);

            // Ajouter les pièces jointes
            if (attachments != null) {
                for (String attachment : attachments) {
                    File file = new File(attachment);
                    if (file.exists()) {
                        helper.addAttachment(file.getName(), file);
                    } else {
                        log.warn("Le fichier de pièce jointe n'existe pas: {}", attachment);
                    }
                }
            }

            mailSender.send(message);
            log.info("Email avec pièces jointes envoyé avec succès à {}", to);
        } catch (Exception e) {
            log.error("Erreur lors de l'envoi de l'email avec pièces jointes à {}: {}", to, e.getMessage(), e);
            throw new RuntimeException("Impossible d'envoyer l'email avec pièces jointes", e);
        }
    }

    <% if (useTemplating) { %>
    @Override
    <% if (asyncNotifications) { %>@Async<% } %>
    public void sendTemplateEmail(String to, String subject, String templateName, Object model) {
        try {
            String htmlContent = templateService.processTemplate(templateName, model);
            sendEmail(to, subject, htmlContent, true);
            log.info("Email basé sur template envoyé avec succès à {}", to);
        } catch (Exception e) {
            log.error("Erreur lors de l'envoi de l'email basé sur template à {}: {}", to, e.getMessage(), e);
            throw new RuntimeException("Impossible d'envoyer l'email basé sur template", e);
        }
    }
    <% } %>
}
