package <%= packageName %>.notification.service;

import <%= packageName %>.notification.dto.PushNotificationDTO;
import com.google.auth.oauth2.GoogleCredentials;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.messaging.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;
import javax.annotation.PostConstruct;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Implémentation du service de notifications push utilisant Firebase Cloud Messaging (FCM)
 */
@Service
public class FcmPushService implements PushNotificationService {

    private final Logger log = LoggerFactory.getLogger(FcmPushService.class);

    @Value("${app.firebase-config:firebase-service-account.json}")
    private String firebaseConfigPath;

    private FirebaseApp firebaseApp;

    @PostConstruct
    private void initialize() {
        try {
            FirebaseOptions options = FirebaseOptions.builder()
                    .setCredentials(GoogleCredentials.fromStream(
                            new ClassPathResource(firebaseConfigPath).getInputStream()))
                    .build();

            if (FirebaseApp.getApps().isEmpty()) {
                firebaseApp = FirebaseApp.initializeApp(options);
                log.info("Firebase application initialisée avec succès");
            } else {
                firebaseApp = FirebaseApp.getInstance();
                log.info("Firebase application déjà initialisée");
            }
        } catch (IOException e) {
            log.error("Erreur lors de l'initialisation de Firebase: {}", e.getMessage(), e);
        }
    }

    @Override
    public boolean sendToDevice(PushNotificationDTO notification) {
        try {
            Message message = Message.builder()
                    .setToken(notification.getToken())
                    .setNotification(
                            Notification.builder()
                                    .setTitle(notification.getTitle())
                                    .setBody(notification.getBody())
                                    .setImage(notification.getImageUrl())
                                    .build()
                    )
                    .putAllData(notification.getData())
                    .build();

            String response = FirebaseMessaging.getInstance().send(message);
            log.info("Notification envoyée avec succès: {}", response);
            return true;
        } catch (FirebaseMessagingException e) {
            log.error("Erreur lors de l'envoi de la notification: {}", e.getMessage(), e);
            return false;
        }
    }

    @Override
    public boolean sendToTopic(PushNotificationDTO notification, String topic) {
        try {
            Message message = Message.builder()
                    .setTopic(topic)
                    .setNotification(
                            Notification.builder()
                                    .setTitle(notification.getTitle())
                                    .setBody(notification.getBody())
                                    .setImage(notification.getImageUrl())
                                    .build()
                    )
                    .putAllData(notification.getData())
                    .build();

            String response = FirebaseMessaging.getInstance().send(message);
            log.info("Notification envoyée au sujet {} avec succès: {}", topic, response);
            return true;
        } catch (FirebaseMessagingException e) {
            log.error("Erreur lors de l'envoi de la notification au sujet {}: {}", topic, e.getMessage(), e);
            return false;
        }
    }

    @Override
    public boolean subscribeToTopic(String token, String topic) {
        try {
            List<String> tokens = new ArrayList<>();
            tokens.add(token);

            TopicManagementResponse response = FirebaseMessaging.getInstance()
                    .subscribeToTopic(tokens, topic);

            log.info("Abonnement au sujet {} effectué avec succès, {} réussite(s), {} échec(s)",
                    topic, response.getSuccessCount(), response.getFailureCount());

            return response.getFailureCount() == 0;
        } catch (FirebaseMessagingException e) {
            log.error("Erreur lors de l'abonnement au sujet {}: {}", topic, e.getMessage(), e);
            return false;
        }
    }

    @Override
    public boolean unsubscribeFromTopic(String token, String topic) {
        try {
            List<String> tokens = new ArrayList<>();
            tokens.add(token);

            TopicManagementResponse response = FirebaseMessaging.getInstance()
                    .unsubscribeFromTopic(tokens, topic);

            log.info("Désabonnement du sujet {} effectué avec succès, {} réussite(s), {} échec(s)",
                    topic, response.getSuccessCount(), response.getFailureCount());

            return response.getFailureCount() == 0;
        } catch (FirebaseMessagingException e) {
            log.error("Erreur lors du désabonnement du sujet {}: {}", topic, e.getMessage(), e);
            return false;
        }
    }
}
