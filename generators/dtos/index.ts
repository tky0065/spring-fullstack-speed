import { BaseGenerator } from "../base-generator.js";
import chalk from "chalk";

/**
 * G√©n√©rateur de DTOs (Data Transfer Objects)
 * Permet de g√©n√©rer automatiquement les classes DTO correspondant aux entit√©s
 */
export default class DtosGenerator extends BaseGenerator {
  declare answers: any;

  constructor(args: string | string[], options: any) {
    super(args, options);

    // Options pour le g√©n√©rateur de DTOs
    this.option("entity-name", {
      description: "Nom de l'entit√© pour laquelle g√©n√©rer des DTOs",
      type: String,
    });

    this.option("package-name", {
      description: "Nom du package pour les DTOs",
      type: String,
    });
  }

  initializing() {
    this.log("Initialisation du g√©n√©rateur de DTOs...");
  }

  async prompting() {
    // Utiliser as any pour √©viter les erreurs TypeScript lors de l'acc√®s aux propri√©t√©s
    const opts = this.options as any;

    const prompts: any = [
      {
        type: "input",
        name: "entityName",
        message: "Pour quelle entit√© souhaitez-vous g√©n√©rer des DTOs?",
        default: opts["entity-name"],
        validate: (input: string) => {
          if (!input || input.trim() === "") {
            return "Le nom de l'entit√© est obligatoire.";
          }
          if (!/^[A-Z][a-zA-Z0-9]*$/.test(input)) {
            return "Le nom de l'entit√© doit commencer par une majuscule et ne contenir que des lettres et des chiffres.";
          }
          return true;
        },
      },
      {
        type: "input",
        name: "packageName",
        message: "Dans quel package voulez-vous cr√©er ces DTOs?",
        default: opts["package-name"] || "com.example.dto",
        validate: (input: string) => {
          if (/^[a-z][a-z0-9_]*(\.[a-z][a-z0-9_]*)*$/.test(input)) {
            return true;
          }
          return "Le nom du package doit √™tre un nom de package Java valide.";
        },
      },
      {
        type: "checkbox",
        name: "dtoTypes",
        message: "Quels types de DTOs souhaitez-vous g√©n√©rer?",
        choices: [
          { name: "DTO de cr√©ation (Create)", value: "create", checked: true },
          { name: "DTO de mise √† jour (Update)", value: "update", checked: true },
          { name: "DTO de r√©ponse (Response)", value: "response", checked: true },
          { name: "DTO de recherche (Search)", value: "search", checked: false },
          { name: "DTO de liste (List)", value: "list", checked: false },
        ],
      },
      {
        type: "confirm",
        name: "addValidation",
        message: "Voulez-vous ajouter des validations aux DTOs?",
        default: true,
      },
      {
        type: "confirm",
        name: "generateMapper",
        message: "Voulez-vous g√©n√©rer un mapper entre l'entit√© et les DTOs?",
        default: true,
      },
    ];

    this.answers = await this.prompt(prompts);
  }

  configuring() {
    this.log("Configuration des DTOs...");
    // Logique de configuration ici
  }

  writing() {
    this.log("G√©n√©ration des fichiers pour les DTOs...");

    // Code de g√©n√©ration des fichiers √† impl√©menter
    this.log(chalk.yellow("Cette fonctionnalit√© sera impl√©ment√©e dans une prochaine t√¢che."));
  }

  end() {
    this.log(chalk.green(`üöÄ DTOs pour l'entit√© ${this.answers.entityName} g√©n√©r√©s avec succ√®s!`));

    if (this.answers.generateMapper) {
      this.log(chalk.green(`‚úÖ Mapper g√©n√©r√© pour faciliter la conversion entre l'entit√© et les DTOs.`));
    }

    this.log(chalk.blue("Prochaines √©tapes recommand√©es:"));
    this.log(`1. Adapter les DTOs g√©n√©r√©s selon les besoins sp√©cifiques de votre application`);
    this.log(`2. Int√©grer les DTOs dans vos controllers et services`);
  }
}
