import { BaseGenerator } from "../base-generator.js";
import chalk from "chalk";

/**
 * G√©n√©rateur de CRUD pour les entit√©s
 * Permet de g√©n√©rer automatiquement les op√©rations CRUD pour une entit√© existante
 */
export default class CrudGenerator extends BaseGenerator {
  declare answers: any;

  constructor(args: string | string[], options: any) {
    super(args, options);

    // Options pour le g√©n√©rateur CRUD
    this.option("entity-name", {
      description: "Nom de l'entit√© pour laquelle g√©n√©rer le CRUD",
      type: String,
    });
  }

  initializing() {
    this.log("Initialisation du g√©n√©rateur CRUD...");
    this.log(`G√©n√©ration des op√©rations CRUD pour une entit√© existante.`);
  }

  async prompting() {
    // Utiliser as any pour √©viter les erreurs TypeScript lors de l'acc√®s aux propri√©t√©s
    const opts = this.options as any;

    const prompts: any = [
      {
        type: "input",
        name: "entityName",
        message: "Pour quelle entit√© souhaitez-vous g√©n√©rer les op√©rations CRUD?",
        default: opts["entity-name"],
        validate: (input: string) => {
          if (!input || input.trim() === "") {
            return "Le nom de l'entit√© est obligatoire.";
          }
          // Validation simple, √† √©tendre plus tard
          return true;
        },
      },
      {
        type: "checkbox",
        name: "operations",
        message: "Quelles op√©rations CRUD souhaitez-vous g√©n√©rer?",
        choices: [
          { name: "Create", value: "create", checked: true },
          { name: "Read", value: "read", checked: true },
          { name: "Update", value: "update", checked: true },
          { name: "Delete", value: "delete", checked: true },
        ],
      },
      {
        type: "confirm",
        name: "generateDTO",
        message: "Voulez-vous g√©n√©rer des DTOs pour cette entit√©?",
        default: true,
      },
    ];

    this.answers = await this.prompt(prompts);
  }

  configuring() {
    this.log("Configuration du CRUD...");
    // Logique de configuration ici
  }

  writing() {
    this.log("G√©n√©ration des fichiers CRUD...");

    // Code de g√©n√©ration des fichiers √† impl√©menter
    this.log(chalk.yellow("Cette fonctionnalit√© sera impl√©ment√©e dans une prochaine t√¢che."));
  }

  end() {
    this.log(chalk.green(`üöÄ Op√©rations CRUD g√©n√©r√©es avec succ√®s pour l'entit√© ${this.answers.entityName}!`));
  }
}
