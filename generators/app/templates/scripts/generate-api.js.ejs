#!/usr/bin/env node
/**
 * Script pour g√©n√©rer automatiquement les clients API √† partir de la sp√©cification OpenAPI
 * Ce script peut √™tre appel√© directement via la commande CLI personnalis√©e
 */

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');
const chalk = require('chalk'); // Utiliser chalk pour les messages color√©s

// Configuration
const DEFAULT_API_URL = 'http://localhost:8080/v3/api-docs';
const DEFAULT_OUTPUT_DIR = 'src/api';
const DEFAULT_GENERATOR = 'typescript-axios';

/**
 * Affiche un message d'aide pour l'utilisation du g√©n√©rateur
 */
function showHelp() {
  console.log(chalk.blue.bold('üìö OpenAPI Client Generator - Aide'));
  console.log('');
  console.log('Cette commande g√©n√®re automatiquement des clients API TypeScript √† partir de votre sp√©cification OpenAPI.');
  console.log('');
  console.log(chalk.yellow('Usage:'));
  console.log('  sfs generate-api [options]');
  console.log('');
  console.log(chalk.yellow('Options:'));
  console.log(`  --url    URL de la sp√©cification OpenAPI (d√©faut: ${DEFAULT_API_URL})`);
  console.log(`  --output R√©pertoire de sortie (d√©faut: ${DEFAULT_OUTPUT_DIR})`);
  console.log(`  --gen    G√©n√©rateur √† utiliser (d√©faut: ${DEFAULT_GENERATOR})`);
  console.log('  --help   Affiche ce message d\'aide');
  console.log('');
  console.log(chalk.yellow('G√©n√©rateurs disponibles:'));
  console.log('  typescript-fetch    - Client TypeScript utilisant Fetch API');
  console.log('  typescript-axios    - Client TypeScript utilisant Axios');
  console.log('  typescript-angular  - Client TypeScript pour Angular');
  console.log('  typescript-react-query - Client TypeScript avec React Query');
  console.log('');
  console.log(chalk.yellow('Exemples:'));
  console.log('  sfs generate-api');
  console.log('  sfs generate-api --url=http://myapi:8080/v3/api-docs');
  console.log('  sfs generate-api --output=src/api-client');
  console.log('  sfs generate-api --gen=typescript-fetch');
  console.log('');
}

/**
 * Parse les arguments de la ligne de commande
 */
function parseArguments() {
  const args = process.argv.slice(2);
  const options = {
    url: DEFAULT_API_URL,
    output: DEFAULT_OUTPUT_DIR,
    generator: DEFAULT_GENERATOR
  };

  args.forEach(arg => {
    if (arg === '--help') {
      showHelp();
      process.exit(0);
    } else if (arg.startsWith('--url=')) {
      options.url = arg.split('=')[1];
    } else if (arg.startsWith('--output=')) {
      options.output = arg.split('=')[1];
    } else if (arg.startsWith('--gen=')) {
      options.generator = arg.split('=')[1];
    }
  });

  return options;
}

/**
 * G√©n√®re les clients API √† partir de la sp√©cification OpenAPI
 */
async function generateApi() {
  try {
    const options = parseArguments();

    console.log(chalk.blue.bold('üöÄ G√©n√©ration des clients API depuis OpenAPI...'));
    console.log(chalk.yellow(`URL de l'API:  ${options.url}`));
    console.log(chalk.yellow(`Sortie:        ${options.output}`));
    console.log(chalk.yellow(`G√©n√©rateur:    ${options.generator}`));
    console.log('');

    // S'assurer que le r√©pertoire de sortie existe
    const outputDir = path.resolve(process.cwd(), options.output);
    if (!fs.existsSync(path.dirname(outputDir))) {
      fs.mkdirSync(path.dirname(outputDir), { recursive: true });
    }

    // Ex√©cuter la commande openapi-generator-cli
    const generator = spawn('npx', [
      '@openapitools/openapi-generator-cli',
      'generate',
      '-i', options.url,
      '-g', options.generator,
      '-o', options.output
    ], { stdio: 'inherit' });

    generator.on('error', (err) => {
      console.error(chalk.red('‚ùå Erreur lors du lancement du g√©n√©rateur OpenAPI:'));
      console.error(chalk.red(err.message));
      process.exit(1);
    });

    generator.on('close', (code) => {
      if (code === 0) {
        console.log(chalk.green('\n‚úÖ G√©n√©ration des clients API termin√©e avec succ√®s!'));
        console.log(chalk.yellow(`Les clients API ont √©t√© g√©n√©r√©s dans: ${outputDir}`));
      } else {
        console.error(chalk.red(`\n‚ùå Le g√©n√©rateur s'est termin√© avec le code d'erreur: ${code}`));
        console.log(chalk.yellow('Assurez-vous que:'));
        console.log('- Votre API Spring Boot est en cours d\'ex√©cution');
        console.log('- L\'endpoint OpenAPI est accessible √† l\'URL sp√©cifi√©e');
        console.log('- Vous avez install√© @openapitools/openapi-generator-cli');
        process.exit(code);
      }
    });

  } catch (error) {
    console.error(chalk.red('‚ùå Une erreur est survenue:'));
    console.error(chalk.red(error.message));
    process.exit(1);
  }
}

// Ex√©cuter le script
generateApi();
