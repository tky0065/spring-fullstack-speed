# API Frontend avec OpenAPI Generator

Ce projet utilise OpenAPI Generator pour g√©n√©rer automatiquement des clients API TypeScript √† partir de votre API Spring Boot.

## üí° Comment √ßa fonctionne

1. Votre backend Spring Boot expose une documentation OpenAPI/Swagger
2. Le g√©n√©rateur d'API r√©cup√®re cette documentation et g√©n√®re des clients TypeScript typ√©s
3. Vous utilisez ces clients dans votre code React avec autocompl√©tion et typage fort

## üöÄ G√©n√©ration des clients API

### Pr√©requis

- Backend Spring Boot en cours d'ex√©cution avec SpringDoc configur√©
- npm/Node.js install√©

### Commande simple

```bash
npm run api
```

Cette commande v√©rifie automatiquement si votre serveur est accessible et g√©n√®re les clients API dans le dossier `src/api`.

### Options avanc√©es

```bash
# Utiliser une URL sp√©cifique
npm run api -- --url=http://localhost:8080/v3/api-docs

# Sp√©cifier un dossier de sortie
npm run api -- --output=./src/api-clients

# Utiliser un g√©n√©rateur diff√©rent
npm run api -- --generator=typescript-fetch

# Ignorer la v√©rification du serveur
npm run api -- --skip-validation

# Afficher l'aide
npm run api -- --help
```

## üìö Utilisation des API g√©n√©r√©es

### Exemple simple

```tsx
import { UserApi } from '../api';
import { apiConfiguration } from '../services/apiConfig';

// Composant React
function UsersList() {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    // Initialiser l'API g√©n√©r√©e
    const userApi = new UserApi(apiConfiguration);

    // Appeler l'API
    userApi.getAllUsers()
      .then(response => setUsers(response.data))
      .catch(error => console.error(error));
  }, []);

  return (
    <div>
      <h2>Liste des utilisateurs</h2>
      <ul>
        {users.map(user => (
          <li key={user.id}>{user.name}</li>
        ))}
      </ul>
    </div>
  );
}
```

### Avec React Query

```tsx
import { useQuery } from 'react-query';
import { UserApi } from '../api';
import { apiConfiguration } from '../services/apiConfig';

// Composant React avec React Query
function UsersListWithQuery() {
  const userApi = new UserApi(apiConfiguration);

  const { data: users, isLoading, error } = useQuery('users',
    async () => {
      const response = await userApi.getAllUsers();
      return response.data;
    }
  );

  if (isLoading) return <div>Chargement...</div>;
  if (error) return <div>Erreur: {error.message}</div>;

  return (
    <div>
      <h2>Liste des utilisateurs</h2>
      <ul>
        {users.map(user => (
          <li key={user.id}>{user.name}</li>
        ))}
      </ul>
    </div>
  );
}
```

### Avec notre hook personnalis√©

```tsx
import { useApi } from '../hooks/useApi';

// Composant React avec notre hook personnalis√©
function UsersListWithHook() {
  const { data: users, loading, error, fetchData } = useApi('/users');

  useEffect(() => {
    fetchData();
  }, []);

  if (loading) return <div>Chargement...</div>;
  if (error) return <div>Erreur: {error.message}</div>;

  return (
    <div>
      <h2>Liste des utilisateurs</h2>
      <ul>
        {users.map(user => (
          <li key={user.id}>{user.name}</li>
        ))}
      </ul>
    </div>
  );
}
```

## üîÑ Automatisation

Pour assurer que vos clients API sont toujours √† jour, vous pouvez :

1. **R√©g√©n√©rer lors des changements backend** : Ajoutez un script dans votre package.json qui surveille les changements de l'API
2. **Int√©grer dans votre CI/CD** : G√©n√©rez les clients API lors de votre processus de build
3. **Pre-commit hook** : G√©n√©rez les clients avant chaque commit pour vous assurer qu'ils sont √† jour

## ‚ú® Avantages par rapport √† Inertia.js

- **Typage fort** : TypeScript conna√Æt exactement la structure de vos API
- **Ind√©pendance du framework** : Fonctionne avec n'importe quel framework frontend
- **Documentation int√©gr√©e** : Les clients g√©n√©r√©s incluent des commentaires JSDoc
- **Evolutivit√©** : S'adapte automatiquement √† l'√©volution de votre API
- **Coh√©rence** : Assure que frontend et backend partagent les m√™mes contrats d'API
