#!/usr/bin/env node
/**
 * Script de g√©n√©ration automatique des clients API TypeScript
 * Ce script facilite la g√©n√©ration des clients API √† partir de la documentation OpenAPI
 *
 * Usage:
 *   npm run api                     - G√©n√®re les clients API avec les param√®tres par d√©faut
 *   npm run api -- --url=<URL>      - Utilise une URL sp√©cifique pour la documentation OpenAPI
 *   npm run api -- --output=<PATH>  - Sp√©cifie un dossier de sortie personnalis√©
 *   npm run api -- --help           - Affiche l'aide
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const chalk = require('chalk');

// Analyser les arguments de la ligne de commande
const args = process.argv.slice(2);
const options = {
  url: 'http://localhost:8080/v3/api-docs',
  output: './src/api',
  generator: 'typescript-axios',
  help: false,
  skipValidation: false
};

// Traitement des arguments
args.forEach(arg => {
  if (arg === '--help' || arg === '-h') {
    options.help = true;
  } else if (arg === '--skip-validation') {
    options.skipValidation = true;
  } else if (arg.startsWith('--url=')) {
    options.url = arg.split('=')[1];
  } else if (arg.startsWith('--output=')) {
    options.output = arg.split('=')[1];
  } else if (arg.startsWith('--generator=')) {
    options.generator = arg.split('=')[1];
  }
});

// Afficher l'aide si demand√©
if (options.help) {
  console.log(chalk.blue('üöÄ G√©n√©rateur de clients API √† partir de la documentation OpenAPI'));
  console.log('');
  console.log(chalk.yellow('Usage:'));
  console.log('  npm run api                       - G√©n√®re les clients API avec les param√®tres par d√©faut');
  console.log('  npm run api -- --url=<URL>        - Utilise une URL sp√©cifique pour la documentation OpenAPI');
  console.log('  npm run api -- --output=<PATH>    - Sp√©cifie un dossier de sortie personnalis√©');
  console.log('  npm run api -- --generator=<TYPE> - Sp√©cifie le type de g√©n√©rateur (typescript-axios par d√©faut)');
  console.log('  npm run api -- --skip-validation  - Saute la validation du serveur');
  console.log('  npm run api -- --help             - Affiche cette aide');
  console.log('');
  console.log(chalk.yellow('Exemples:'));
  console.log('  npm run api -- --url=http://localhost:8080/v3/api-docs');
  console.log('  npm run api -- --output=./src/api-clients');
  console.log('  npm run api -- --generator=typescript-fetch');
  process.exit(0);
}

// Fonction principale
async function generateApi() {
  console.log(chalk.blue('üöÄ G√©n√©ration des clients API depuis la documentation OpenAPI...'));
  console.log('');

  try {
    // V√©rifier si le serveur est accessible (sauf si --skip-validation est utilis√©)
    if (!options.skipValidation) {
      console.log(chalk.yellow(`V√©rification de la disponibilit√© du serveur √† ${options.url}...`));
      try {
        execSync(`curl -s -o /dev/null -w "%{http_code}" ${options.url}`);
        console.log(chalk.green('‚úÖ Serveur accessible, documentation OpenAPI disponible'));
      } catch (error) {
        console.log(chalk.red('‚ùå Serveur non accessible ou documentation OpenAPI non disponible'));
        console.log(chalk.yellow('‚ö†Ô∏è Assurez-vous que votre serveur Spring Boot est d√©marr√© et que SpringDoc est configur√©'));
        console.log(chalk.yellow('üí° Vous pouvez utiliser --skip-validation pour ignorer cette v√©rification'));
        process.exit(1);
      }
    }

    // Cr√©er le dossier de sortie s'il n'existe pas
    const outputDir = path.resolve(process.cwd(), options.output);
    if (!fs.existsSync(outputDir)) {
      console.log(chalk.yellow(`Cr√©ation du dossier de sortie: ${outputDir}`));
      fs.mkdirSync(outputDir, { recursive: true });
    }

    // Ex√©cuter la commande de g√©n√©ration API
    console.log(chalk.yellow(`G√©n√©ration des clients TypeScript avec le g√©n√©rateur ${options.generator}...`));

    // Construire la commande openapi-generator-cli
    const command = `npx @openapitools/openapi-generator-cli generate \
      -i ${options.url} \
      -g ${options.generator} \
      -o ${options.output} \
      --additional-properties=withInterfaces=true,supportsES6=true,npmName=@api/client,modelPropertyNaming=original`;

    execSync(command, { stdio: 'inherit' });

    console.log('');
    console.log(chalk.green('‚úÖ G√©n√©ration des clients API termin√©e avec succ√®s!'));
    console.log(chalk.yellow(`Les clients API ont √©t√© g√©n√©r√©s dans le dossier ${options.output}`));
    console.log(chalk.blue('üí° Exemple d\'utilisation:'));
    console.log('');
    console.log(chalk.white(`import { UserApi } from '${options.output.startsWith('./') ? options.output : './' + options.output}';`));
    console.log(chalk.white(`import { apiConfiguration } from '@/services/apiConfig';`));
    console.log(chalk.white(''));
    console.log(chalk.white(`// Initialiser l'API`));
    console.log(chalk.white(`const userApi = new UserApi(apiConfiguration);`));
    console.log(chalk.white(''));
    console.log(chalk.white(`// Utiliser l'API`));
    console.log(chalk.white(`userApi.getAllUsers()`));
    console.log(chalk.white(`  .then(response => console.log(response.data))`));
    console.log(chalk.white(`  .catch(error => console.error(error));`));

  } catch (error) {
    console.error(chalk.red('‚ùå Erreur lors de la g√©n√©ration des clients API:'));
    console.error(error.message);
    process.exit(1);
  }
}

// Ex√©cuter la fonction principale
generateApi();
