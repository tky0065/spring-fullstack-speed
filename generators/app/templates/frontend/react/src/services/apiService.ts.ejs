/**
 * Service d'API qui utilise les clients générés par OpenAPI Generator
 */

import { Configuration, DefaultApi } from '../api';

// Configuration par défaut pour l'API
const defaultConfig = new Configuration({
  basePath: import.meta.env.VITE_API_BASE_URL || 'http://localhost:8080',
  middleware: [
    {
      // Middleware pour ajouter le token JWT à chaque requête
      pre: async (context: { init: RequestInit }) => {
        const token = localStorage.getItem('auth_token');
        if (token) {
          context.init.headers = {
            ...context.init.headers,
            Authorization: `Bearer ${token}`,
          };
        }
        return context;
      },
    },
  ],
});

// Instance d'API par défaut
const api = new DefaultApi(defaultConfig);

/**
 * Service d'API centralisé
 *
 * Utilisez cette classe pour accéder aux endpoints d'API
 * générés automatiquement par OpenAPI Generator.
 */
export class ApiService {
  /**
   * Récupère l'instance d'API avec la configuration spécifiée
   *
   * @param config Configuration personnalisée (optionnelle)
   * @returns Instance de l'API
   */
  static getApi(config?: Configuration): DefaultApi {
    if (config) {
      return new DefaultApi(config);
    }
    return api;
  }

  /**
   * Crée une nouvelle configuration
   *
   * @param baseUrl URL de base de l'API
   * @param addAuthHeader Ajouter automatiquement le header d'authentification
   * @returns Nouvelle configuration
   */
  static createConfig(baseUrl?: string, addAuthHeader = true): Configuration {
    const config = new Configuration({
      basePath: baseUrl || defaultConfig.basePath,
    });

    if (addAuthHeader) {
      // Ajouter le middleware pour l'authentification
      config.middleware = [...(defaultConfig.middleware || [])];
    }

    return config;
  }

  /**
   * Handler d'erreur générique pour les erreurs d'API
   *
   * @param error Erreur à traiter
   * @returns Message d'erreur formaté
   */
  static handleError(error: any): string {
    console.error('API Error:', error);

    if (error.response) {
      // La requête a été faite et le serveur a répondu avec un code d'erreur
      const status = error.response.status;

      switch (status) {
        case 401:
          // Non autorisé - déconnecter l'utilisateur
          localStorage.removeItem('auth_token');
          window.location.href = '/login';
          return 'Session expirée. Veuillez vous reconnecter.';

        case 403:
          return 'Vous n\'avez pas les droits nécessaires pour effectuer cette action.';

        case 404:
          return 'La ressource demandée n\'existe pas.';

        case 422:
          return 'Les données fournies ne sont pas valides.';

        default:
          return `Erreur de serveur (${status}). Veuillez réessayer plus tard.`;
      }
    } else if (error.request) {
      // La requête a été faite mais aucune réponse n'a été reçue
      return 'Impossible de contacter le serveur. Vérifiez votre connexion internet.';
    } else {
      // Une erreur s'est produite lors de la configuration de la requête
      return 'Une erreur est survenue. Veuillez réessayer.';
    }
  }
}

export default ApiService;
