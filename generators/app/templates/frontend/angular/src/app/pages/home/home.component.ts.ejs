import { Component, inject, signal, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterLink } from '@angular/router';

// Cet import sera fourni par les API générées avec ng-openapi-gen
// Nous le définissons ici comme exemple dans un commentaire
// import { UserService } from '../../api/services/user.service';
// import { User } from '../../api/models/user';

@Component({
  selector: 'app-home',
  standalone: true,
  imports: [CommonModule, RouterLink],
  template: `
    <div class="home-container">
      <h1>Bienvenue sur {{ appName }}</h1>

      <section class="features">
        <h2>Fonctionnalités</h2>
        <div class="feature-grid">
          <div class="feature-card">
            <h3>Spring Boot Backend</h3>
            <p>API REST sécurisée avec Spring Security et JWT</p>
          </div>

          <div class="feature-card">
            <h3>Angular 20 Frontend</h3>
            <p>Interface utilisateur moderne avec les dernières fonctionnalités d'Angular</p>
          </div>

          <div class="feature-card">
            <h3>API Générées</h3>
            <p>Communication typée entre le frontend et le backend</p>
          </div>

          <div class="feature-card">
            <h3>Architecture Standalone</h3>
            <p>Composants légers sans modules NgModule</p>
          </div>
        </div>
      </section>

      <section class="api-example" *ngIf="isAuthenticated()">
        <h2>Exemple API</h2>

        <div class="card">
          <div *ngIf="loading()">Chargement des données...</div>

          <div *ngIf="error()">
            <p class="error">Erreur: {{ error() }}</p>
            <button (click)="loadData()">Réessayer</button>
          </div>

          <div *ngIf="!loading() && !error() && items().length">
            <h3>Données récupérées</h3>
            <ul>
              <li *ngFor="let item of items()">
                {{ item.name }}
              </li>
            </ul>
          </div>

          <div *ngIf="!loading() && !error() && !items().length">
            <p>Aucune donnée disponible</p>
            <button (click)="loadData()">Charger les données</button>
          </div>
        </div>
      </section>

      <section class="cta">
        <h2>Démarrez maintenant</h2>
        <p>Créez votre première application sécurisée</p>
        <div class="button-group">
          <a routerLink="/register" class="button primary">S'inscrire</a>
          <a routerLink="/login" class="button secondary">Se connecter</a>
        </div>
      </section>
    </div>
  `,
  styles: [`
    .home-container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 2rem 1rem;
    }

    h1 {
      font-size: 2.5rem;
      margin-bottom: 2rem;
      color: #3f51b5;
      text-align: center;
    }

    section {
      margin-bottom: 3rem;
    }

    h2 {
      font-size: 1.8rem;
      margin-bottom: 1.5rem;
      color: #333;
    }

    .feature-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 1.5rem;
    }

    .feature-card {
      background-color: #f5f5f5;
      padding: 1.5rem;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .feature-card h3 {
      color: #3f51b5;
      margin-bottom: 0.5rem;
    }

    .card {
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      padding: 1.5rem;
    }

    .error {
      color: #f44336;
      margin-bottom: 1rem;
    }

    button {
      background-color: #3f51b5;
      color: white;
      border: none;
      padding: 0.5rem 1rem;
      border-radius: 4px;
      cursor: pointer;
      font-weight: bold;
    }

    button:hover {
      background-color: #303f9f;
    }

    .cta {
      text-align: center;
      background-color: #f5f5f5;
      padding: 3rem;
      border-radius: 8px;
    }

    .button-group {
      display: flex;
      justify-content: center;
      gap: 1rem;
      margin-top: 1.5rem;
    }

    .button {
      display: inline-block;
      padding: 0.8rem 1.5rem;
      border-radius: 4px;
      font-weight: bold;
      text-decoration: none;
      transition: background-color 0.3s;
    }

    .primary {
      background-color: #3f51b5;
      color: white;
    }

    .primary:hover {
      background-color: #303f9f;
    }

    .secondary {
      background-color: white;
      color: #3f51b5;
      border: 2px solid #3f51b5;
    }

    .secondary:hover {
      background-color: #f0f0f0;
    }
  `]
})
export class HomeComponent implements OnInit {
  // Dans une implémentation réelle, nous injecterions des services générés par ng-openapi-gen
  // private userService = inject(UserService);
  private authService = inject(AuthService);

  // Application name obtenu depuis le template
  appName = '<%= appName %>';

  // États réactifs avec Signals d'Angular 20
  items = signal<any[]>([]);
  loading = signal(false);
  error = signal<string | null>(null);
  isAuthenticated = this.authService.isAuthenticated;

  ngOnInit(): void {
    // Chargement initial des données si l'utilisateur est authentifié
    if (this.isAuthenticated()) {
      this.loadData();
    }
  }

  loadData(): void {
    this.loading.set(true);
    this.error.set(null);

    // Simulation d'appel API - dans une implémentation réelle, nous utiliserions
    // les services générés par ng-openapi-gen
    setTimeout(() => {
      try {
        // Simuler des données
        this.items.set([
          { id: '1', name: 'Item 1' },
          { id: '2', name: 'Item 2' },
          { id: '3', name: 'Item 3' }
        ]);
        this.loading.set(false);
      } catch (err: any) {
        this.error.set(err.message || 'Une erreur est survenue');
        this.loading.set(false);
      }
    }, 1000);

    // Dans une implémentation réelle avec ng-openapi-gen :
    /*
    this.userService.getUsers().subscribe({
      next: (users) => {
        this.items.set(users);
        this.loading.set(false);
      },
      error: (err) => {
        this.error.set(err.message || 'Une erreur est survenue');
        this.loading.set(false);
      }
    });
    */
  }
}

// Import factice pour l'exemple - à remplacer par l'import réel
class AuthService {
  isAuthenticated = signal(false);
}
