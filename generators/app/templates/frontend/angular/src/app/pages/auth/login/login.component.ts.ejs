import { Component, inject, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterLink, ActivatedRoute, Router } from '@angular/router';
import { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';
import { AuthService } from '../../core/services/auth.service';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, RouterLink],
  template: `
    <div class="auth-container">
      <div class="auth-card">
        <h2>Connexion</h2>

        @if (error()) {
          <div class="error-alert">
            {{ error() }}
          </div>
        }

        <form [formGroup]="loginForm" (ngSubmit)="onSubmit()">
          <div class="form-group">
            <label for="email">Email</label>
            <input
              type="email"
              id="email"
              formControlName="email"
              autocomplete="email"
              [class.invalid]="hasError('email')"
            >
            @if (hasError('email')) {
              <div class="error-message">
                @if (loginForm.controls.email.errors?.['required']) {
                  L'email est requis.
                } @else if (loginForm.controls.email.errors?.['email']) {
                  Veuillez entrer un email valide.
                }
              </div>
            }
          </div>

          <div class="form-group">
            <label for="password">Mot de passe</label>
            <div class="password-field">
              <input
                [type]="showPassword() ? 'text' : 'password'"
                id="password"
                formControlName="password"
                autocomplete="current-password"
                [class.invalid]="hasError('password')"
              >
              <button
                type="button"
                class="show-password"
                (click)="toggleShowPassword()"
              >
                {{ showPassword() ? 'Masquer' : 'Afficher' }}
              </button>
            </div>
            @if (hasError('password')) {
              <div class="error-message">
                Le mot de passe est requis.
              </div>
            }
          </div>

          <div class="form-actions">
            <div class="remember-me">
              <input type="checkbox" id="remember" formControlName="remember">
              <label for="remember">Se souvenir de moi</label>
            </div>
            <a routerLink="/forgot-password" class="forgot-password">
              Mot de passe oublié ?
            </a>
          </div>

          <button
            type="submit"
            class="btn-submit"
            [disabled]="loading() || !loginForm.valid"
          >
            {{ loading() ? 'Connexion en cours...' : 'Se connecter' }}
          </button>
        </form>

        <div class="auth-footer">
          <p>
            Pas encore de compte ?
            <a routerLink="/register">S'inscrire</a>
          </p>
        </div>
      </div>
    </div>
  `,
  styles: [`
    .auth-container {
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: calc(100vh - 200px);
      padding: 2rem 1rem;
    }

    .auth-card {
      width: 100%;
      max-width: 400px;
      padding: 2rem;
      border-radius: 8px;
      background: white;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    h2 {
      margin-bottom: 1.5rem;
      color: #333;
      text-align: center;
    }

    .error-alert {
      background: #ffebee;
      color: #d32f2f;
      padding: 0.75rem;
      border-radius: 4px;
      margin-bottom: 1rem;
      font-size: 0.875rem;
    }

    .form-group {
      margin-bottom: 1.25rem;
    }

    label {
      display: block;
      margin-bottom: 0.5rem;
      color: #555;
      font-weight: 500;
    }

    input[type="email"],
    input[type="password"],
    input[type="text"] {
      width: 100%;
      padding: 0.75rem;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 1rem;
      transition: border-color 0.2s;
    }

    input.invalid {
      border-color: #d32f2f;
    }

    input:focus {
      border-color: #3f51b5;
      outline: none;
    }

    .password-field {
      position: relative;
    }

    .show-password {
      position: absolute;
      right: 10px;
      top: 50%;
      transform: translateY(-50%);
      background: none;
      border: none;
      color: #666;
      font-size: 0.8rem;
      cursor: pointer;
    }

    .error-message {
      color: #d32f2f;
      font-size: 0.75rem;
      margin-top: 0.25rem;
    }

    .form-actions {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
      font-size: 0.875rem;
    }

    .remember-me {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .forgot-password {
      color: #3f51b5;
      text-decoration: none;
    }

    .btn-submit {
      width: 100%;
      padding: 0.75rem;
      background: #3f51b5;
      color: white;
      border: none;
      border-radius: 4px;
      font-size: 1rem;
      font-weight: 500;
      cursor: pointer;
      transition: background 0.2s;
    }

    .btn-submit:hover:not(:disabled) {
      background: #303f9f;
    }

    .btn-submit:disabled {
      background: #c5cae9;
      cursor: not-allowed;
    }

    .auth-footer {
      text-align: center;
      margin-top: 1.5rem;
      font-size: 0.875rem;
      color: #666;
    }

    .auth-footer a {
      color: #3f51b5;
      text-decoration: none;
      font-weight: 500;
    }
  `]
})
export class LoginComponent {
  private fb = inject(FormBuilder);
  private authService = inject(AuthService);
  private route = inject(ActivatedRoute);
  private router = inject(Router);

  // État avec les Signals d'Angular 20
  loading = signal(false);
  error = signal<string | null>(null);
  showPassword = signal(false);

  // Formulaire réactif
  loginForm = this.fb.group({
    email: ['', [Validators.required, Validators.email]],
    password: ['', [Validators.required]],
    remember: [false]
  });

  /**
   * Vérifie si un champ du formulaire a une erreur
   */
  hasError(field: string): boolean {
    const control = this.loginForm.get(field);
    return !!(control && control.invalid && (control.dirty || control.touched));
  }

  /**
   * Bascule l'affichage du mot de passe
   */
  toggleShowPassword(): void {
    this.showPassword.update(value => !value);
  }

  /**
   * Gestion de la soumission du formulaire
   */
  onSubmit(): void {
    if (this.loginForm.invalid) return;

    this.loading.set(true);
    this.error.set(null);

    const { email, password } = this.loginForm.value;

    this.authService.login({
      email: email as string,
      password: password as string
    }).subscribe({
      next: () => {
        // Redirection après connexion réussie
        const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';
        this.router.navigateByUrl(returnUrl);
      },
      error: (err) => {
        this.error.set(err.error?.message || 'Erreur lors de la connexion');
        this.loading.set(false);
      }
    });
  }
}
