#!/usr/bin/env node
/**
 * Script de g√©n√©ration automatique des clients API TypeScript pour Angular
 * Ce script utilise ng-openapi-gen pour g√©n√©rer des clients Angular typ√©s
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Analyser les arguments de la ligne de commande
const args = process.argv.slice(2);
const options = {
  url: 'http://localhost:8080/v3/api-docs',
  output: './src/app/api',
  help: false,
  skipValidation: false
};

// Traitement des arguments
args.forEach(arg => {
  if (arg === '--help' || arg === '-h') {
    options.help = true;
  } else if (arg === '--skip-validation') {
    options.skipValidation = true;
  } else if (arg.startsWith('--url=')) {
    options.url = arg.split('=')[1];
  } else if (arg.startsWith('--output=')) {
    options.output = arg.split('=')[1];
  }
});

// Afficher l'aide si demand√©
if (options.help) {
  console.log('üöÄ G√©n√©rateur de clients API Angular √† partir de la documentation OpenAPI');
  console.log('');
  console.log('Usage:');
  console.log('  npm run api                     - G√©n√®re les clients API avec les param√®tres par d√©faut');
  console.log('  npm run api -- --url=<URL>      - Utilise une URL sp√©cifique pour la documentation OpenAPI');
  console.log('  npm run api -- --output=<PATH>  - Sp√©cifie un dossier de sortie personnalis√©');
  console.log('  npm run api -- --skip-validation - Saute la validation du serveur');
  console.log('  npm run api -- --help           - Affiche cette aide');
  console.log('');
  process.exit(0);
}

// Fonction principale
async function generateApi() {
  console.log('üöÄ G√©n√©ration des clients API Angular 20 depuis la documentation OpenAPI...');

  try {
    // V√©rifier si le serveur est accessible (sauf si --skip-validation est utilis√©)
    if (!options.skipValidation) {
      console.log(`V√©rification de la disponibilit√© du serveur √† ${options.url}...`);
      try {
        execSync(`curl -s -o /dev/null -w "%{http_code}" ${options.url}`);
        console.log('‚úÖ Serveur accessible, documentation OpenAPI disponible');
      } catch (error) {
        console.log('‚ùå Serveur non accessible ou documentation OpenAPI non disponible');
        console.log('‚ö†Ô∏è Assurez-vous que votre serveur Spring Boot est d√©marr√© et que SpringDoc est configur√©');
        console.log('üí° Vous pouvez utiliser --skip-validation pour ignorer cette v√©rification');
        process.exit(1);
      }
    }

    // Cr√©er le dossier de sortie s'il n'existe pas
    const outputDir = path.resolve(process.cwd(), options.output);
    if (!fs.existsSync(outputDir)) {
      console.log(`Cr√©ation du dossier de sortie: ${outputDir}`);
      fs.mkdirSync(outputDir, { recursive: true });
    }

    // Ex√©cuter la commande ng-openapi-gen
    console.log(`G√©n√©ration des clients API Angular 20 avec ng-openapi-gen...`);

    const command = `npx ng-openapi-gen --input ${options.url} --output ${options.output}`;
    execSync(command, { stdio: 'inherit' });

    console.log('');
    console.log('‚úÖ G√©n√©ration des clients API termin√©e avec succ√®s!');
    console.log(`Les clients API ont √©t√© g√©n√©r√©s dans le dossier ${options.output}`);
    console.log('üí° Exemple d\'utilisation avec Angular 20:');
    console.log('');
    console.log(`// Injecter le service g√©n√©r√©`);
    console.log(`import { ApiService } from '${options.output.startsWith('./') ? options.output : './' + options.output}';`);
    console.log('');
    console.log(`// Dans un composant`);
    console.log(`@Component({...})`);
    console.log(`export class MyComponent {`);
    console.log(`  // Injection avec le nouveau signal API d'Angular 20`);
    console.log(`  users = signal<User[]>([]);`);
    console.log(`  loading = signal(false);`);
    console.log(`  error = signal<string | null>(null);`);
    console.log('');
    console.log(`  constructor(private userService: UserService) {}`);
    console.log('');
    console.log(`  loadUsers() {`);
    console.log(`    this.loading.set(true);`);
    console.log(`    this.userService.getUsers().subscribe({`);
    console.log(`      next: (data) => {`);
    console.log(`        this.users.set(data);`);
    console.log(`        this.loading.set(false);`);
    console.log(`      },`);
    console.log(`      error: (err) => {`);
    console.log(`        this.error.set(err.message);`);
    console.log(`        this.loading.set(false);`);
    console.log(`      }`);
    console.log(`    });`);
    console.log(`  }`);
    console.log(`}`);

  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration des clients API:');
    console.error(error.message);
    process.exit(1);
  }
}

// Ex√©cuter la fonction principale
generateApi();
