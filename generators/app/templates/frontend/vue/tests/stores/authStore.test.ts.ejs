import { describe, it, expect, beforeEach, vi } from 'vitest';
import { setActivePinia, createPinia } from 'pinia';
import { useAuthStore } from '@/stores/authStore';
import ApiService from '@/services/ApiService';

// Mock du service API
vi.mock('@/services/ApiService', () => ({
  default: {
    post: vi.fn(),
    get: vi.fn(),
  },
  apiConfig: {}
}));

describe('Auth Store', () => {
  // Configuration avant chaque test
  beforeEach(() => {
    // Créer une nouvelle instance Pinia pour chaque test
    setActivePinia(createPinia());

    // Réinitialiser tous les mocks
    vi.clearAllMocks();

    // Mock de localStorage
    Storage.prototype.getItem = vi.fn();
    Storage.prototype.setItem = vi.fn();
    Storage.prototype.removeItem = vi.fn();
  });

  it('should initialize with default state', () => {
    const authStore = useAuthStore();

    expect(authStore.user.id).toBeNull();
    expect(authStore.user.email).toBeNull();
    expect(authStore.status).toBe('idle');
    expect(authStore.error).toBeNull();
  });

  it('should update state on successful login', async () => {
    // Mock de la réponse API
    const mockUser = {
      id: '123',
      email: 'test@example.com',
      name: 'Test User',
      token: 'mock-jwt-token'
    };

    // Configuration du mock pour simuler une réponse réussie
    vi.mocked(ApiService.post).mockResolvedValue(mockUser);

    const authStore = useAuthStore();
    const credentials = { email: 'test@example.com', password: 'password' };

    // Appel de l'action login
    await authStore.login(credentials);

    // Vérification des changements d'état
    expect(authStore.user.id).toBe('123');
    expect(authStore.user.email).toBe('test@example.com');
    expect(authStore.user.token).toBe('mock-jwt-token');
    expect(authStore.status).toBe('success');
    expect(authStore.error).toBeNull();

    // Vérification de l'appel API
    expect(ApiService.post).toHaveBeenCalledWith('/auth/login', credentials);

    // Vérification du stockage du token
    expect(localStorage.setItem).toHaveBeenCalledWith('auth_token', 'mock-jwt-token');
  });

  it('should update state on login failure', async () => {
    // Configuration du mock pour simuler une erreur
    const errorMessage = 'Invalid credentials';
    vi.mocked(ApiService.post).mockRejectedValue({
      response: {
        data: {
          message: errorMessage
        }
      }
    });

    const authStore = useAuthStore();
    const credentials = { email: 'wrong@example.com', password: 'wrongpass' };

    // Appel de l'action login avec attente de l'erreur
    try {
      await authStore.login(credentials);
      // Le test devrait échouer si aucune erreur n'est levée
      expect(true).toBe(false);
    } catch (error) {
      // Vérification des changements d'état
      expect(authStore.status).toBe('error');
      expect(authStore.error).toBe(errorMessage);
      expect(authStore.user.token).toBeNull();

      // Vérification que le token n'a pas été stocké
      expect(localStorage.setItem).not.toHaveBeenCalled();
    }
  });

  it('should reset state on logout', async () => {
    // Configuration initiale avec un utilisateur connecté
    const authStore = useAuthStore();
    authStore.user.id = '123';
    authStore.user.email = 'test@example.com';
    authStore.user.token = 'mock-jwt-token';
    authStore.status = 'success';

    // Mock du service API pour le logout
    vi.mocked(ApiService.post).mockResolvedValue({});

    // Appel de l'action logout
    await authStore.logout();

    // Vérification du reset de l'état
    expect(authStore.user.id).toBeNull();
    expect(authStore.user.token).toBeNull();

    // Vérification de l'appel API
    expect(ApiService.post).toHaveBeenCalledWith('/auth/logout');

    // Vérification de la suppression du token
    expect(localStorage.removeItem).toHaveBeenCalledWith('auth_token');
  });

  it('should initialize auth from localStorage', () => {
    // Mock du token stocké dans localStorage
    const storedToken = 'stored-jwt-token';
    vi.mocked(localStorage.getItem).mockReturnValue(storedToken);

    const authStore = useAuthStore();

    // Appel de l'action d'initialisation
    authStore.initAuth();

    // Vérification de l'état
    expect(authStore.user.token).toBe(storedToken);
    expect(authStore.status).toBe('success');

    // Vérification de l'accès au localStorage
    expect(localStorage.getItem).toHaveBeenCalledWith('auth_token');
  });
});
