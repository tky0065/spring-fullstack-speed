import { describe, it, expect, beforeEach, vi } from 'vitest';
import { rest } from 'msw';
import { setupServer } from 'msw/node';
import { apiConfiguration } from '@/services/apiConfig';

// Simuler une classe API générée par OpenAPI Generator
class MockUserApi {
  constructor(private configuration: any) {}

  /**
   * Méthode simulant une méthode générée par OpenAPI Generator
   */
  public getAllUsers() {
    const axios = this.configuration.axios;
    return axios.get('/api/users');
  }

  /**
   * Méthode simulant une méthode générée par OpenAPI Generator avec des paramètres
   */
  public getUserById(userId: string) {
    const axios = this.configuration.axios;
    return axios.get(`/api/users/${userId}`);
  }
}

// Données de test
const mockUsers = [
  { id: '1', name: 'User 1', email: 'user1@example.com' },
  { id: '2', name: 'User 2', email: 'user2@example.com' },
];

// Setup du serveur MSW pour intercepter les requêtes HTTP
const server = setupServer(
  // Mock pour GET /api/users
  rest.get('/api/users', (req, res, ctx) => {
    return res(
      ctx.status(200),
      ctx.json(mockUsers)
    );
  }),

  // Mock pour GET /api/users/:id
  rest.get('/api/users/:id', (req, res, ctx) => {
    const { id } = req.params;
    const user = mockUsers.find(user => user.id === id);
    if (user) {
      return res(ctx.status(200), ctx.json(user));
    }
    return res(ctx.status(404), ctx.json({ message: 'User not found' }));
  })
);

describe('OpenAPI Generated API Client for Vue', () => {
  // Démarre le serveur avant tous les tests
  beforeAll(() => server.listen());

  // Réinitialise les handlers après chaque test
  afterEach(() => server.resetHandlers());

  // Arrête le serveur après tous les tests
  afterAll(() => server.close());

  it('should fetch all users successfully', async () => {
    // Arrange
    const userApi = new MockUserApi(apiConfiguration);

    // Act
    const response = await userApi.getAllUsers();

    // Assert
    expect(response.status).toBe(200);
    expect(response.data).toEqual(mockUsers);
    expect(response.data.length).toBe(2);
    expect(response.data[0].name).toBe('User 1');
  });

  it('should fetch a user by ID successfully', async () => {
    // Arrange
    const userApi = new MockUserApi(apiConfiguration);

    // Act
    const response = await userApi.getUserById('1');

    // Assert
    expect(response.status).toBe(200);
    expect(response.data).toEqual(mockUsers[0]);
    expect(response.data.name).toBe('User 1');
  });

  it('should handle error when user is not found', async () => {
    // Arrange
    const userApi = new MockUserApi(apiConfiguration);

    // Act & Assert
    await expect(userApi.getUserById('999'))
      .rejects
      .toThrow();
  });
});
