<template>
  <div :class="['rounded-md border p-4', typeClasses, className]">
    <div class="flex">
      <div class="flex-shrink-0">
        <component :is="icon" />
      </div>
      <div class="ml-3 flex-1">
        <p class="text-sm">{{ message }}</p>
      </div>
      <div v-if="dismissable" class="pl-3">
        <button
          type="button"
          class="inline-flex rounded-md p-1.5 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
          @click="dismiss"
        >
          <span class="sr-only">Fermer</span>
          <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </button>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { computed, markRaw, h } from 'vue';

/**
 * Interface des props pour le composant Alert
 */
interface AlertProps {
  type: 'success' | 'error' | 'warning' | 'info';
  message: string;
  dismissable?: boolean;
  className?: string;
}

// Définir les props
const props = withDefaults(defineProps<AlertProps>(), {
  dismissable: false,
  className: ''
});

// Définir les émetteurs d'événements
const emit = defineEmits<{
  (e: 'dismiss'): void
}>();

// Fonction pour fermer l'alerte
const dismiss = () => {
  emit('dismiss');
};

// Calculer les classes CSS selon le type d'alerte
const typeClasses = computed(() => {
  switch (props.type) {
    case 'success':
      return 'bg-green-50 text-green-800 border-green-400';
    case 'error':
      return 'bg-red-50 text-red-800 border-red-400';
    case 'warning':
      return 'bg-yellow-50 text-yellow-800 border-yellow-400';
    case 'info':
    default:
      return 'bg-blue-50 text-blue-800 border-blue-400';
  }
});

// Calculer l'icône selon le type d'alerte
const icon = computed(() => {
  switch (props.type) {
    case 'success':
      return markRaw(h('svg', {
        class: 'h-5 w-5 text-green-400',
        viewBox: '0 0 20 20',
        fill: 'currentColor',
      }, [
        h('path', {
          'fill-rule': 'evenodd',
          d: 'M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z',
          'clip-rule': 'evenodd',
        }),
      ]));
    case 'error':
      return markRaw(h('svg', {
        class: 'h-5 w-5 text-red-400',
        viewBox: '0 0 20 20',
        fill: 'currentColor',
      }, [
        h('path', {
          'fill-rule': 'evenodd',
          d: 'M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z',
          'clip-rule': 'evenodd',
        }),
      ]));
    case 'warning':
      return markRaw(h('svg', {
        class: 'h-5 w-5 text-yellow-400',
        viewBox: '0 0 20 20',
        fill: 'currentColor',
      }, [
        h('path', {
          'fill-rule': 'evenodd',
          d: 'M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z',
          'clip-rule': 'evenodd',
        }),
      ]));
    case 'info':
    default:
      return markRaw(h('svg', {
        class: 'h-5 w-5 text-blue-400',
        viewBox: '0 0 20 20',
        fill: 'currentColor',
      }, [
        h('path', {
          'fill-rule': 'evenodd',
          d: 'M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z',
          'clip-rule': 'evenodd',
        }),
      ]));
  }
});
</script>
