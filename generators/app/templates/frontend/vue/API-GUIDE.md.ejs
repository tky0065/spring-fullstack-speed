# API Frontend Vue.js avec OpenAPI Generator

Ce guide explique comment utiliser OpenAPI Generator pour g√©n√©rer automatiquement des clients API TypeScript pour votre application Vue.js √† partir de la documentation OpenAPI/Swagger de votre backend Spring Boot.

## üí° Comment √ßa fonctionne

1. Votre backend Spring Boot expose une documentation OpenAPI/Swagger
2. Le g√©n√©rateur d'API r√©cup√®re cette documentation et g√©n√®re des clients TypeScript typ√©s
3. Vous utilisez ces clients g√©n√©r√©s dans votre code Vue avec autocompl√©tion et typage fort

## üöÄ G√©n√©ration des clients API

### Pr√©requis

- Backend Spring Boot en cours d'ex√©cution avec SpringDoc configur√©
- npm/Node.js install√©

### Commande simple

```bash
npm run api
```

Cette commande v√©rifie automatiquement si votre serveur est accessible et g√©n√®re les clients API dans le dossier `src/api`.

### Options avanc√©es

```bash
# Utiliser une URL sp√©cifique
npm run api -- --url=http://localhost:8080/v3/api-docs

# Sp√©cifier un dossier de sortie
npm run api -- --output=./src/api-clients

# Utiliser un g√©n√©rateur diff√©rent
npm run api -- --generator=typescript-fetch

# Ignorer la v√©rification du serveur
npm run api -- --skip-validation

# Afficher l'aide
npm run api -- --help
```

## üìö Utilisation des API g√©n√©r√©es

### Avec Composition API (Vue 3)

```vue
<script setup lang="ts">
import { ref, onMounted } from 'vue';
import { UserApi } from '../api';
import { initApi } from '../services/apiConfig';

// Initialiser l'API g√©n√©r√©e
const userApi = initApi(UserApi);
const users = ref([]);
const loading = ref(false);
const error = ref(null);

// Fonction pour r√©cup√©rer les utilisateurs
const fetchUsers = async () => {
  loading.value = true;
  try {
    const response = await userApi.getAllUsers();
    users.value = response.data;
    error.value = null;
  } catch (err: any) {
    error.value = err.message;
  } finally {
    loading.value = false;
  }
};

// Charger les donn√©es au montage du composant
onMounted(() => {
  fetchUsers();
});
</script>

<template>
  <div>
    <h2>Liste des utilisateurs</h2>
    <div v-if="loading">Chargement...</div>
    <div v-else-if="error">Erreur: {{ error }}</div>
    <ul v-else>
      <li v-for="user in users" :key="user.id">{{ user.name }}</li>
    </ul>
  </div>
</template>
```

### Avec Vue Query

```vue
<script setup lang="ts">
import { useQuery, useMutation } from '@tanstack/vue-query';
import { UserApi } from '../api';
import { initApi } from '../services/apiConfig';

// Initialiser l'API g√©n√©r√©e
const userApi = initApi(UserApi);

// Requ√™te pour r√©cup√©rer les utilisateurs
const {
  data: users,
  isLoading,
  error,
  refetch: fetchUsers
} = useQuery({
  queryKey: ['users'],
  queryFn: async () => {
    const response = await userApi.getAllUsers();
    return response.data;
  }
});

// Mutation pour cr√©er un utilisateur
const createUserMutation = useMutation({
  mutationFn: async (userData: any) => {
    const response = await userApi.createUser(userData);
    return response.data;
  },
  onSuccess: () => {
    // Invalider la requ√™te pour rafra√Æchir la liste
    fetchUsers();
  }
});

// Fonction pour ajouter un utilisateur
const addUser = () => {
  createUserMutation.mutate({
    name: 'Nouvel utilisateur',
    email: 'nouvel@example.com'
  });
};
</script>
```

### Avec Pinia Store

```ts
// userStore.ts
import { defineStore } from 'pinia';
import { UserApi } from '../api';
import { initApi } from '../services/apiConfig';

export const useUserStore = defineStore('users', {
  state: () => ({
    users: [],
    currentUser: null,
    loading: false,
    error: null
  }),

  actions: {
    async fetchUsers() {
      this.loading = true;
      try {
        const userApi = initApi(UserApi);
        const response = await userApi.getAllUsers();
        this.users = response.data;
        this.error = null;
      } catch (err: any) {
        this.error = err.message;
      } finally {
        this.loading = false;
      }
    },

    async fetchUserById(userId: string) {
      this.loading = true;
      try {
        const userApi = initApi(UserApi);
        const response = await userApi.getUserById(userId);
        this.currentUser = response.data;
        this.error = null;
      } catch (err: any) {
        this.error = err.message;
      } finally {
        this.loading = false;
      }
    }
  }
});
```

## üîÑ Automatisation

Pour assurer que vos clients API sont toujours √† jour, vous pouvez :

1. **R√©g√©n√©rer lors des changements backend** : Ajoutez un script dans votre package.json qui surveille les changements de l'API
2. **Int√©grer dans votre CI/CD** : G√©n√©rez les clients API lors de votre processus de build
3. **Pre-commit hook** : G√©n√©rez les clients avant chaque commit pour vous assurer qu'ils sont √† jour

## ‚ú® Avantages par rapport √† Inertia.js

- **Typage fort** : TypeScript conna√Æt exactement la structure de vos API
- **Ind√©pendance du framework** : Fonctionne avec n'importe quel framework frontend
- **Documentation int√©gr√©e** : Les clients g√©n√©r√©s incluent des commentaires JSDoc
- **Evolutivit√©** : S'adapte automatiquement √† l'√©volution de votre API
- **Coh√©rence** : Assure que frontend et backend partagent les m√™mes contrats d'API
