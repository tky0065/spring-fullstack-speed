package <%= packageName %>.config;

<% if (database === 'MongoDB') { %>
import com.mongodb.ConnectionString;
import com.mongodb.MongoClientSettings;
import com.mongodb.MongoCredential;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
import org.springframework.data.mongodb.config.AbstractMongoClientConfiguration;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;

import java.util.Collection;
import java.util.Collections;
import java.util.concurrent.TimeUnit;

/**
 * Configuration spécifique à MongoDB.
 * Active uniquement lorsque MongoDB est sélectionné comme base de données.
 */
@Configuration
@EnableMongoRepositories(basePackages = "<%= packageName %>.repository")
public class MongoDBConfig extends AbstractMongoClientConfiguration {

    @Value("${spring.data.mongodb.host}")
    private String host;

    @Value("${spring.data.mongodb.port}")
    private int port;

    @Value("${spring.data.mongodb.database}")
    private String database;

    @Value("${spring.data.mongodb.username:}")
    private String username;

    @Value("${spring.data.mongodb.password:}")
    private String password;

    @Value("${spring.data.mongodb.authentication-database:admin}")
    private String authenticationDatabase;

    @Override
    protected String getDatabaseName() {
        return database;
    }

    /**
     * Configuration MongoDB pour l'environnement de production.
     * Ces paramètres sont optimisés pour la performance et la sécurité.
     *
     * @return MongoClient configuré pour l'environnement de production
     */
    @Bean
    @Profile("prod")
    @Override
    public MongoClient mongoClient() {
        ConnectionString connectionString = new ConnectionString("mongodb://" + host + ":" + port + "/" + database);

        MongoClientSettings.Builder builder = MongoClientSettings.builder()
            .applyConnectionString(connectionString)
            .applyToConnectionPoolSettings(builder1 -> {
                builder1.maxSize(50);                         // Maximum de 50 connexions simultanées
                builder1.minSize(10);                         // Minimum de 10 connexions maintenues
                builder1.maxConnectionIdleTime(30000, TimeUnit.MILLISECONDS);  // Temps d'inactivité max
                builder1.maxWaitTime(60000, TimeUnit.MILLISECONDS);  // Temps d'attente max pour une connexion
            })
            .applyToSocketSettings(builder1 -> {
                builder1.connectTimeout(30000, TimeUnit.MILLISECONDS);  // Timeout de connexion
                builder1.readTimeout(30000, TimeUnit.MILLISECONDS);     // Timeout de lecture
            })
            .applyToServerSettings(builder1 -> {
                builder1.heartbeatFrequency(20000, TimeUnit.MILLISECONDS);  // Fréquence de heartbeat
                builder1.minHeartbeatFrequency(500, TimeUnit.MILLISECONDS); // Fréquence minimale de heartbeat
            });

        // Ajouter l'authentification si des identifiants sont fournis
        if (username != null && !username.isEmpty() && password != null && !password.isEmpty()) {
            MongoCredential credential = MongoCredential.createCredential(
                username,
                authenticationDatabase,
                password.toCharArray()
            );
            builder.credential(credential);
        }

        return MongoClients.create(builder.build());
    }

    /**
     * Configuration MongoDB pour l'environnement de développement.
     * Ces paramètres sont optimisés pour le développement et le débogage.
     *
     * @return MongoClient configuré pour l'environnement de développement
     */
    @Bean
    @Profile("dev")
    public MongoClient devMongoClient() {
        ConnectionString connectionString = new ConnectionString("mongodb://" + host + ":" + port + "/" + database);

        MongoClientSettings.Builder builder = MongoClientSettings.builder()
            .applyConnectionString(connectionString)
            .applyToConnectionPoolSettings(builder1 -> {
                builder1.maxSize(20);                         // Maximum de 20 connexions en développement
                builder1.minSize(5);                          // Minimum de 5 connexions maintenues
                builder1.maxConnectionIdleTime(60000, TimeUnit.MILLISECONDS);  // Temps d'inactivité plus long en dev
            });

        // Ajouter l'authentification si des identifiants sont fournis
        if (username != null && !username.isEmpty() && password != null && !password.isEmpty()) {
            MongoCredential credential = MongoCredential.createCredential(
                username,
                authenticationDatabase,
                password.toCharArray()
            );
            builder.credential(credential);
        }

        return MongoClients.create(builder.build());
    }

    /**
     * Configuration de MongoTemplate avec des options adaptées.
     *
     * @return MongoTemplate configuré
     */
    @Bean
    public MongoTemplate mongoTemplate() {
        return new MongoTemplate(mongoClient(), getDatabaseName());
    }

    /**
     * Configure les packages à scanner pour les mappings d'entités MongoDB.
     */
    @Override
    protected Collection<String> getMappingBasePackages() {
        return Collections.singleton("<%= packageName %>.entity");
    }
}
<% } %>
