package com.example.app.security.password;

import org.passay.*;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Validateur de mot de passe utilisant la bibliothèque Passay
 * Applique des règles de sécurité configurables pour les mots de passe
 */
@Component
public class PasswordValidator {

    private final org.passay.PasswordValidator validator;
    private final PasswordPolicy passwordPolicy;

    public PasswordValidator(PasswordPolicy passwordPolicy) {
        this.passwordPolicy = passwordPolicy;
        this.validator = createValidator();
    }

    /**
     * Valide un mot de passe selon les règles de sécurité configurées
     * @param password le mot de passe à valider
     * @return le résultat de la validation
     */
    public PasswordValidationResult validate(String password) {
        RuleResult result = validator.validate(new PasswordData(password));
        List<String> messages = validator.getMessages(result);

        return new PasswordValidationResult(result.isValid(), messages);
    }

    /**
     * Crée le validateur avec toutes les règles configurées
     */
    private org.passay.PasswordValidator createValidator() {
        List<Rule> rules = new ArrayList<>();

        // Règle de longueur
        rules.add(new LengthRule(passwordPolicy.getMinLength(), passwordPolicy.getMaxLength()));

        // Règles de caractères
        if (passwordPolicy.isRequireUppercase()) {
            rules.add(new CharacterRule(EnglishCharacterData.UpperCase, passwordPolicy.getMinUppercase()));
        }

        if (passwordPolicy.isRequireLowercase()) {
            rules.add(new CharacterRule(EnglishCharacterData.LowerCase, passwordPolicy.getMinLowercase()));
        }

        if (passwordPolicy.isRequireDigit()) {
            rules.add(new CharacterRule(EnglishCharacterData.Digit, passwordPolicy.getMinDigit()));
        }

        if (passwordPolicy.isRequireSpecial()) {
            rules.add(new CharacterRule(EnglishCharacterData.Special, passwordPolicy.getMinSpecial()));
        }

        // Règles avancées
        if (passwordPolicy.isDisallowWhitespace()) {
            rules.add(new WhitespaceRule());
        }

        if (passwordPolicy.isPreventSequences()) {
            rules.add(new IllegalSequenceRule(EnglishSequenceData.Alphabetical, 5, false));
            rules.add(new IllegalSequenceRule(EnglishSequenceData.Numerical, 5, false));
            rules.add(new IllegalSequenceRule(EnglishSequenceData.USQwerty, 5, false));
        }

        // Interdire les mots de passe courants
        if (passwordPolicy.isPreventCommonPasswords()) {
            rules.add(new DictionaryRule(
                    new WordListDictionary(new CommonsPasswordDictionary())
            ));
        }

        return new org.passay.PasswordValidator(rules);
    }

    /**
     * Classe pour encapsuler le résultat de la validation du mot de passe
     */
    public static class PasswordValidationResult {
        private final boolean valid;
        private final List<String> messages;

        public PasswordValidationResult(boolean valid, List<String> messages) {
            this.valid = valid;
            this.messages = messages;
        }

        public boolean isValid() {
            return valid;
        }

        public List<String> getMessages() {
            return messages;
        }

        public String getFormattedMessages() {
            return String.join(", ", messages);
        }
    }
}
