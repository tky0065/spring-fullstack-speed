package <%= packageName %>.security.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
<% if (frontendFramework !== 'Aucun (API seulement)') { %>
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
<% } %>
<% if (additionalFeatures.includes('openapi')) { %>
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
<% } %>
<% if (additionalFeatures.includes('prometheus')) { %>
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
<% } %>

/**
 * Configuration de la sécurité de l'application
 */
@Configuration
@EnableWebSecurity
public class BasicSecurityConfig {

    /**
     * Configuration des règles de sécurité HTTP
     */
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            // Désactivation de CSRF pour les API REST
            .csrf(AbstractHttpConfigurer::disable)

            // Configuration de la gestion de session
<% if (frontendFramework === 'Thymeleaf' || frontendFramework === 'JTE') { %>
            .sessionManagement(session -> session
                .sessionCreationPolicy(SessionCreationPolicy.ALWAYS))
<% } else { %>
            .sessionManagement(session -> session
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS))
<% } %>

            // Configuration des règles d'autorisation
            .authorizeHttpRequests(authorize -> authorize
                // Endpoints publics
                .requestMatchers("/api/public/**").permitAll()
<% if (additionalFeatures.includes('openapi')) { %>
                // Swagger / OpenAPI endpoints
                .requestMatchers("/docs/**", "/swagger-ui/**", "/swagger-ui.html", "/api-docs/**", "/v3/api-docs/**", "/api-docs", "/v3/api-docs").permitAll()
<% } %>
<% if (additionalFeatures.includes('prometheus')) { %>
                // Actuator endpoints
                .requestMatchers("/actuator/health", "/actuator/prometheus").permitAll()
<% } %>
<% if (database === 'H2') { %>
                // Console H2 (uniquement en développement)
                .requestMatchers("/h2-console/**").permitAll()
<% } %>
<% if (frontendFramework === 'Thymeleaf' || frontendFramework === 'JTE') { %>
                // Pages publiques accessibles sans authentification pour Thymeleaf/JTE
                .requestMatchers("/", "/home", "/login", "/register", "/error", "/assets/**", "/css/**", "/js/**", "/images/**", "/webjars/**").permitAll()
<% } else if (frontendFramework !== 'Aucun (API seulement)') { %>
                // Ressources statiques pour le frontend
                .requestMatchers("/", "/index.html", "/static/**", "/*.js", "/*.css", "/*.ico", "/*.json").permitAll()
<% } %>
                // Tous les autres endpoints nécessitent une authentification
                .anyRequest().authenticated()
            )
<% if (database === 'H2') { %>
            // Configuration spéciale pour la console H2
            .headers(headers -> headers
                .frameOptions(frameOptions -> frameOptions.sameOrigin())
            )
<% } %><% if (frontendFramework === 'Thymeleaf' || frontendFramework === 'JTE') { %>
            // Configuration pour les formulaires de login avec Thymeleaf/JTE
            .formLogin(form -> form
                .loginPage("/login")
                .loginProcessingUrl("/authenticate")
                .defaultSuccessUrl("/home", true)
                .failureUrl("/login?error=true")
                .permitAll()
            )
            .logout(logout -> logout
                .logoutRequestMatcher(new AntPathRequestMatcher("/logout"))
                .logoutSuccessUrl("/login?logout")
                .invalidateHttpSession(true)
                .clearAuthentication(true)
                .deleteCookies("JSESSIONID")
                .permitAll()
            )
<% } %>;

        return http.build();
    }

    /**
     * Expose l'AuthenticationManager comme un bean Spring
     * Nécessaire pour l'injection dans le AuthController
     */
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration)
            throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }

    /**
     * Configure l'encodeur de mot de passe pour l'application
     * Utilise BCrypt pour sécuriser les mots de passe
     */
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
