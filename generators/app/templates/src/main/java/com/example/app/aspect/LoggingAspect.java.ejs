package <%= packageName %>.aspect;

import <%= packageName %>.util.LoggingUtils;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Component;
import org.springframework.util.StopWatch;

/**
 * Aspect pour journaliser automatiquement les temps d'exécution des méthodes.
 * Cet aspect est actif uniquement en environnement de dev et de prod.
 */
@Aspect
@Component
@Profile({"dev", "prod"})
public class LoggingAspect {

    private final Logger log = LoggerFactory.getLogger(this.getClass());

    /**
     * Journalise les temps d'exécution des méthodes dans les services.
     *
     * @param joinPoint le point d'exécution dans l'application
     * @return le résultat de la méthode
     * @throws Throwable si une erreur survient pendant l'exécution
     */
    @Around("execution(* <%= packageName %>.service.*.*(..))")
    public Object logServiceMethodExecution(ProceedingJoinPoint joinPoint) throws Throwable {
        return logMethodExecution(joinPoint, "SERVICE");
    }

    /**
     * Journalise les temps d'exécution des méthodes dans les contrôleurs.
     *
     * @param joinPoint le point d'exécution dans l'application
     * @return le résultat de la méthode
     * @throws Throwable si une erreur survient pendant l'exécution
     */
    @Around("execution(* <%= packageName %>.controller.*.*(..))")
    public Object logControllerMethodExecution(ProceedingJoinPoint joinPoint) throws Throwable {
        return logMethodExecution(joinPoint, "CONTROLLER");
    }

    /**
     * Journalise les temps d'exécution des méthodes dans les repositories.
     * Actif uniquement en développement pour éviter la surcharge en production.
     *
     * @param joinPoint le point d'exécution dans l'application
     * @return le résultat de la méthode
     * @throws Throwable si une erreur survient pendant l'exécution
     */
    @Around("execution(* <%= packageName %>.repository.*.*(..))")
    @Profile("dev")
    public Object logRepositoryMethodExecution(ProceedingJoinPoint joinPoint) throws Throwable {
        return logMethodExecution(joinPoint, "REPOSITORY");
    }

    /**
     * Méthode utilitaire pour journaliser les exécutions de méthodes.
     *
     * @param joinPoint le point d'exécution
     * @param componentType le type de composant (SERVICE, CONTROLLER, etc.)
     * @return le résultat de la méthode
     * @throws Throwable si une erreur survient
     */
    private Object logMethodExecution(ProceedingJoinPoint joinPoint, String componentType) throws Throwable {
        String className = joinPoint.getSignature().getDeclaringTypeName();
        String methodName = joinPoint.getSignature().getName();

        if (log.isDebugEnabled()) {
            LoggingUtils.logMethodParams(log, methodName, joinPoint.getArgs());
        }

        StopWatch stopWatch = new StopWatch();
        stopWatch.start();

        try {
            return joinPoint.proceed();
        } finally {
            stopWatch.stop();
            if (log.isDebugEnabled()) {
                log.debug("[{}] {}.{} executed in {} ms",
                    componentType,
                    className,
                    methodName,
                    stopWatch.getTotalTimeMillis());
            } else if (stopWatch.getTotalTimeMillis() > 1000) {
                // Toujours journaliser les méthodes qui prennent plus d'une seconde
                log.warn("[SLOW {}] {}.{} executed in {} ms",
                    componentType,
                    className,
                    methodName,
                    stopWatch.getTotalTimeMillis());
            }
        }
    }
}
