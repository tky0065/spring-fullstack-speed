package com.example.app.cache;

import com.example.app.entity.Product;
import com.example.app.repository.ProductRepository;
import com.example.app.service.ProductService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.cache.CacheManager;
import org.springframework.test.context.ActiveProfiles;

import java.util.Optional;
import java.util.concurrent.TimeUnit;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.*;

/**
 * Tests de performance pour le système de cache
 */
@SpringBootTest
@ActiveProfiles("test")
public class CachePerformanceTest {

    @Autowired
    private ProductService productService;

    @Autowired
    private CacheManager cacheManager;

    @MockBean
    private ProductRepository productRepository;

    private Product testProduct;

    @BeforeEach
    void setUp() {
        // Nettoyer le cache avant chaque test
        cacheManager.getCacheNames()
                .forEach(cacheName -> {
                    if (cacheManager.getCache(cacheName) != null) {
                        cacheManager.getCache(cacheName).clear();
                    }
                });

        // Configurer un produit de test
        testProduct = new Product();
        testProduct.setId(1L);
        testProduct.setName("Test Product");
        testProduct.setPrice(99.99);
        testProduct.setCategory("Electronics");

        // Configurer le comportement du repository mock
        when(productRepository.findById(anyLong())).thenAnswer(invocation -> {
            // Simuler un temps de traitement typique d'accès à la base de données
            TimeUnit.MILLISECONDS.sleep(150);
            return Optional.of(testProduct);
        });
    }

    @Test
    void verifyCacheImprovePerformance() {
        // Première requête - devrait accéder à la base de données
        long startTime = System.nanoTime();
        Optional<Product> product1 = productService.findById(1L);
        long firstCallTime = System.nanoTime() - startTime;

        // Vérifier que le repository a été appelé
        verify(productRepository, times(1)).findById(1L);
        assertThat(product1).isPresent();
        assertThat(product1.get().getName()).isEqualTo("Test Product");

        // Deuxième requête - devrait utiliser le cache
        startTime = System.nanoTime();
        Optional<Product> product2 = productService.findById(1L);
        long secondCallTime = System.nanoTime() - startTime;

        // Vérifier que le repository n'a pas été appelé à nouveau
        verify(productRepository, times(1)).findById(1L);
        assertThat(product2).isPresent();
        assertThat(product2.get().getName()).isEqualTo("Test Product");

        // La deuxième requête devrait être significativement plus rapide
        assertThat(secondCallTime).isLessThan(firstCallTime / 5);

        System.out.println("Temps du premier appel (DB): " + TimeUnit.NANOSECONDS.toMillis(firstCallTime) + " ms");
        System.out.println("Temps du deuxième appel (Cache): " + TimeUnit.NANOSECONDS.toMillis(secondCallTime) + " ms");
        System.out.println("Amélioration de performance: " + (firstCallTime / secondCallTime) + "x");
    }

    @Test
    void verifyCacheInvalidation() {
        // Première requête - chargement depuis la DB
        Optional<Product> product1 = productService.findById(1L);
        assertThat(product1).isPresent();

        // Vérifier que le repository a été appelé une fois
        verify(productRepository, times(1)).findById(1L);

        // Modifier le produit et le sauvegarder (doit mettre à jour le cache)
        testProduct.setName("Updated Product");
        productService.save(testProduct);

        // Vider le mock pour pouvoir compter les appels à partir de maintenant
        reset(productRepository);

        // La prochaine requête devrait obtenir la version mise à jour depuis le cache
        Optional<Product> updatedProduct = productService.findById(1L);
        assertThat(updatedProduct).isPresent();
        assertThat(updatedProduct.get().getName()).isEqualTo("Updated Product");

        // Vérifier que le repository n'a pas été appelé à nouveau
        verify(productRepository, never()).findById(anyLong());

        // Supprimer l'élément du cache
        productService.deleteById(1L);

        // Reconfigurer le mock pour la nouvelle recherche
        when(productRepository.findById(1L)).thenReturn(Optional.empty());

        // La prochaine requête devrait aller à la DB et ne rien trouver
        Optional<Product> deletedProduct = productService.findById(1L);
        assertThat(deletedProduct).isEmpty();

        // Vérifier que le repository a été appelé
        verify(productRepository, times(1)).findById(1L);
    }

    @Test
    void testCacheWithHighConcurrency() throws Exception {
        // Simuler plusieurs threads accédant au même cache en parallèle
        int threadCount = 10;
        Thread[] threads = new Thread[threadCount];

        // Configurer les threads
        for (int i = 0; i < threadCount; i++) {
            final int threadNumber = i;
            threads[i] = new Thread(() -> {
                for (int j = 0; j < 5; j++) {
                    productService.findById(1L);
                    try {
                        TimeUnit.MILLISECONDS.sleep(10);
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }
                }
            }, "TestThread-" + threadNumber);
        }

        // Démarrer tous les threads
        for (Thread thread : threads) {
            thread.start();
        }

        // Attendre que tous les threads se terminent
        for (Thread thread : threads) {
            thread.join(1000);
        }

        // Le repository ne devrait être appelé qu'une seule fois (le premier accès cache)
        // malgré les 10 threads x 5 appels = 50 accès
        verify(productRepository, times(1)).findById(1L);
    }
}
