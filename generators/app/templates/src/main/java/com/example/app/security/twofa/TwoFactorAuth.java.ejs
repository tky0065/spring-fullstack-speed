package com.example.app.security.twofa;

import com.example.app.entity.User;
import jakarta.persistence.*;
import java.time.Instant;

/**
 * Entité pour stocker les informations d'authentification à deux facteurs (2FA)
 */
@Entity
@Table(name = "two_factor_auth")
public class TwoFactorAuth {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false, unique = true)
    private User user;

    @Column(name = "secret", nullable = false, length = 64)
    private String secret;

    @Column(name = "enabled", nullable = false)
    private boolean enabled = false;

    @Column(name = "backup_codes", length = 255)
    private String backupCodes;

    @Column(name = "last_used", nullable = true)
    private Instant lastUsed;

    @Column(name = "created_at", nullable = false)
    private Instant createdAt;

    @Column(name = "verified", nullable = false)
    private boolean verified = false;

    public TwoFactorAuth() {
        this.createdAt = Instant.now();
    }

    public TwoFactorAuth(User user, String secret) {
        this();
        this.user = user;
        this.secret = secret;
    }

    // Getters et setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public String getSecret() {
        return secret;
    }

    public void setSecret(String secret) {
        this.secret = secret;
    }

    public boolean isEnabled() {
        return enabled;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }

    public String getBackupCodes() {
        return backupCodes;
    }

    public void setBackupCodes(String backupCodes) {
        this.backupCodes = backupCodes;
    }

    public Instant getLastUsed() {
        return lastUsed;
    }

    public void setLastUsed(Instant lastUsed) {
        this.lastUsed = lastUsed;
    }

    public Instant getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(Instant createdAt) {
        this.createdAt = createdAt;
    }

    public boolean isVerified() {
        return verified;
    }

    public void setVerified(boolean verified) {
        this.verified = verified;
    }
}
