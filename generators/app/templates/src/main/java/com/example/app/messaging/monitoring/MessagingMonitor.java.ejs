package com.example.app.messaging.monitoring;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.kafka.clients.admin.AdminClient;
import org.apache.kafka.clients.admin.ConsumerGroupListing;
import org.apache.kafka.clients.admin.ListConsumerGroupsResult;
import org.apache.kafka.clients.admin.TopicDescription;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.rabbit.core.RabbitAdmin;
import org.springframework.boot.actuate.health.Health;
import org.springframework.boot.actuate.health.HealthIndicator;
import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
import org.springframework.kafka.core.KafkaAdmin;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.stream.Collectors;

/**
 * Composant qui surveille l'état et les performances des systèmes de messagerie
 */
@Component
public class MessagingMonitor implements HealthIndicator {

    private static final Logger logger = LoggerFactory.getLogger(MessagingMonitor.class);
    private final ObjectMapper objectMapper = new ObjectMapper();

    // Injection conditionnelle pour ne pas échouer si RabbitMQ ou Kafka ne sont pas configurés
    private final RabbitAdmin rabbitAdmin;
    private final KafkaAdmin kafkaAdmin;

    // Variables pour stocker les métriques
    private Map<String, Object> rabbitMetrics = new HashMap<>();
    private Map<String, Object> kafkaMetrics = new HashMap<>();
    private boolean isRabbitHealthy = true;
    private boolean isKafkaHealthy = true;

    public MessagingMonitor(
            RabbitAdmin rabbitAdmin,
            KafkaAdmin kafkaAdmin) {
        this.rabbitAdmin = rabbitAdmin;
        this.kafkaAdmin = kafkaAdmin;

        // Initialisation des métriques
        initializeMetrics();
    }

    /**
     * Collecte les métriques RabbitMQ toutes les minutes
     */
    @Scheduled(fixedRate = 60000)
    @ConditionalOnBean(RabbitAdmin.class)
    public void collectRabbitMQMetrics() {
        try {
            logger.debug("Collecte des métriques RabbitMQ");

            // Récupération des informations sur les queues
            Properties queueProperties = rabbitAdmin.getQueueProperties("notifications.queue");
            Properties dataQueueProperties = rabbitAdmin.getQueueProperties("data-processing.queue");
            Properties eventsQueueProperties = rabbitAdmin.getQueueProperties("events.queue");

            // Mise à jour des métriques
            rabbitMetrics.put("timestamp", System.currentTimeMillis());

            if (queueProperties != null) {
                rabbitMetrics.put("notifications_queue_size", queueProperties.get("QUEUE_MESSAGE_COUNT"));
                rabbitMetrics.put("notifications_queue_consumers", queueProperties.get("QUEUE_CONSUMER_COUNT"));
            }

            if (dataQueueProperties != null) {
                rabbitMetrics.put("data_queue_size", dataQueueProperties.get("QUEUE_MESSAGE_COUNT"));
                rabbitMetrics.put("data_queue_consumers", dataQueueProperties.get("QUEUE_CONSUMER_COUNT"));
            }

            if (eventsQueueProperties != null) {
                rabbitMetrics.put("events_queue_size", eventsQueueProperties.get("QUEUE_MESSAGE_COUNT"));
                rabbitMetrics.put("events_queue_consumers", eventsQueueProperties.get("QUEUE_CONSUMER_COUNT"));
            }

            // Mise à jour de l'état de santé
            isRabbitHealthy = true;

            // Log des métriques au format JSON
            logger.info("Métriques RabbitMQ: {}", objectMapper.writeValueAsString(rabbitMetrics));

        } catch (Exception e) {
            logger.error("Erreur lors de la collecte des métriques RabbitMQ", e);
            isRabbitHealthy = false;
        }
    }

    /**
     * Collecte les métriques Kafka toutes les minutes
     */
    @Scheduled(fixedRate = 60000)
    @ConditionalOnBean(KafkaAdmin.class)
    public void collectKafkaMetrics() {
        try {
            logger.debug("Collecte des métriques Kafka");

            // Création d'un client admin Kafka
            Properties props = new Properties();
            props.putAll(kafkaAdmin.getConfigurationProperties());
            AdminClient adminClient = AdminClient.create(props);

            // Récupération des informations sur les groupes de consommateurs
            ListConsumerGroupsResult groupsResult = adminClient.listConsumerGroups();
            Collection<ConsumerGroupListing> groups = groupsResult.all().get(30, TimeUnit.SECONDS);

            // Mise à jour des métriques
            kafkaMetrics.put("timestamp", System.currentTimeMillis());
            kafkaMetrics.put("consumer_groups_count", groups.size());
            kafkaMetrics.put("consumer_groups", groups.stream()
                    .map(ConsumerGroupListing::groupId)
                    .collect(Collectors.toList()));

            // Mise à jour de l'état de santé
            isKafkaHealthy = true;

            // Log des métriques au format JSON
            logger.info("Métriques Kafka: {}", objectMapper.writeValueAsString(kafkaMetrics));

        } catch (ExecutionException | InterruptedException | TimeoutException e) {
            logger.error("Erreur lors de la collecte des métriques Kafka", e);
            isKafkaHealthy = false;
        } catch (Exception e) {
            logger.error("Erreur inattendue lors de la collecte des métriques Kafka", e);
            isKafkaHealthy = false;
        }
    }

    /**
     * Met à jour l'état de santé global des systèmes de messagerie
     */
    @Override
    public Health health() {
        Map<String, Object> details = new HashMap<>();
        details.put("rabbit_healthy", isRabbitHealthy);
        details.put("kafka_healthy", isKafkaHealthy);

        if (isRabbitHealthy && isKafkaHealthy) {
            return Health.up().withDetails(details).build();
        } else {
            return Health.down().withDetails(details).build();
        }
    }

    /**
     * Initialisation des métriques avec des valeurs par défaut
     */
    private void initializeMetrics() {
        // Initialisation RabbitMQ
        rabbitMetrics.put("notifications_queue_size", 0);
        rabbitMetrics.put("notifications_queue_consumers", 0);
        rabbitMetrics.put("data_queue_size", 0);
        rabbitMetrics.put("data_queue_consumers", 0);
        rabbitMetrics.put("events_queue_size", 0);
        rabbitMetrics.put("events_queue_consumers", 0);

        // Initialisation Kafka
        kafkaMetrics.put("consumer_groups_count", 0);
        kafkaMetrics.put("consumer_groups", List.of());
    }

    /**
     * Récupère les métriques RabbitMQ actuelles
     */
    public Map<String, Object> getRabbitMetrics() {
        return new HashMap<>(rabbitMetrics);
    }

    /**
     * Récupère les métriques Kafka actuelles
     */
    public Map<String, Object> getKafkaMetrics() {
        return new HashMap<>(kafkaMetrics);
    }
}
