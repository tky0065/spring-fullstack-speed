package <%= packageName %>.inertia;

import io.github.inertia4j.Inertia;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.MessageSource;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.support.RequestContextUtils;

import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

/**
 * Middleware Inertia pour configurer le contexte partagé et gérer les requêtes Inertia.
 */
@Component
public class InertiaMiddleware implements HandlerInterceptor {

    private final MessageSource messageSource;

    @Value("${spring.application.name:<%= appName %>}")
    private String appName;

    @Value("${<%=appName.toLowerCase()%>.frontend.version:1.0.0}")
    private String appVersion;

    public InertiaMiddleware(MessageSource messageSource) {
        this.messageSource = messageSource;

        // Configuration des données partagées statiques
        Inertia.share("appName", appName);
        Inertia.version(() -> appVersion);
    }

    /**
     * Exécuté avant que la requête soit traitée par le contrôleur.
     * Utilisé pour ajouter des données partagées qui peuvent changer à chaque requête.
     */
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        // Configuration des données partagées dynamiques
        Inertia.share("locale", RequestContextUtils.getLocale(request).toString());

        // URL de base pour les requêtes API
        Inertia.share("baseUrl", getBaseUrl(request));

        // Gestion des messages pour l'internationalisation
        Inertia.share("messages", getTranslations(RequestContextUtils.getLocale(request)));

        // Ajouter les erreurs flash s'il y en a
        Object flash = request.getSession().getAttribute("_flash_messages");
        if (flash != null) {
            Inertia.share("flash", flash);
            request.getSession().removeAttribute("_flash_messages");
        }

        // Ajouter des informations sur l'utilisateur si authentifié
        <% if (includeAuth) { %>
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication != null && authentication.isAuthenticated() && !"anonymousUser".equals(authentication.getPrincipal().toString())) {
            Inertia.share("auth", createAuthObject(authentication));
        } else {
            Inertia.share("auth", null);
        }

        // CSRF token pour les formulaires
        if (request.getAttribute("_csrf") != null) {
            Map<String, String> csrf = new HashMap<>();
            csrf.put("token", request.getAttribute("_csrf.token").toString());
            csrf.put("parameterName", request.getAttribute("_csrf.parameterName").toString());
            csrf.put("headerName", request.getAttribute("_csrf.headerName").toString());
            Inertia.share("csrf", csrf);
        }
        <% } %>

        return true;
    }

    /**
     * Obtient l'URL de base de l'application
     */
    private String getBaseUrl(HttpServletRequest request) {
        String scheme = request.getScheme();
        String serverName = request.getServerName();
        int serverPort = request.getServerPort();
        String contextPath = request.getContextPath();

        // Ne pas ajouter le port s'il s'agit du port par défaut
        boolean isDefaultPort = (scheme.equals("http") && serverPort == 80) ||
                               (scheme.equals("https") && serverPort == 443);

        StringBuilder url = new StringBuilder();
        url.append(scheme).append("://").append(serverName);

        if (!isDefaultPort) {
            url.append(":").append(serverPort);
        }

        url.append(contextPath);

        return url.toString();
    }

    <% if (includeAuth) { %>
    /**
     * Crée un objet contenant les informations d'authentification à partager avec le frontend.
     */
    private Map<String, Object> createAuthObject(Authentication authentication) {
        Map<String, Object> authData = new HashMap<>();

        // Ces champs sont à adapter selon votre modèle d'utilisateur
        authData.put("user", authentication.getPrincipal());
        authData.put("roles", authentication.getAuthorities());
        authData.put("isAuthenticated", authentication.isAuthenticated());

        return authData;
    }
    <% } %>

    /**
     * Récupère les traductions pour une locale donnée
     */
    private Map<String, String> getTranslations(Locale locale) {
        Map<String, String> translations = new HashMap<>();

        // Ajoutez ici les clés de traduction importantes que vous voulez avoir sur le frontend
        // Exemple:
        translations.put("common.welcome", messageSource.getMessage("common.welcome", null, "Bienvenue", locale));
        translations.put("common.home", messageSource.getMessage("common.home", null, "Accueil", locale));
        translations.put("common.about", messageSource.getMessage("common.about", null, "À propos", locale));

        <% if (includeAuth) { %>
        // Messages d'authentification
        translations.put("auth.login", messageSource.getMessage("auth.login", null, "Connexion", locale));
        translations.put("auth.register", messageSource.getMessage("auth.register", null, "Inscription", locale));
        translations.put("auth.logout", messageSource.getMessage("auth.logout", null, "Déconnexion", locale));
        translations.put("auth.profile", messageSource.getMessage("auth.profile", null, "Profil", locale));
        <% } %>

        return translations;
    }
}
