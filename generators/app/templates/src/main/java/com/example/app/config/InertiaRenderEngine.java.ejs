package <%= packageName %>.config;

import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.Map;

/**
 * Moteur de rendu pour Inertia.js.
 * Cette classe est responsable de rendre les vues Inertia.js.
 */
public class InertiaRenderEngine {

    private final InertiaProperties inertiaProperties;
    private final ObjectMapper objectMapper = new ObjectMapper();
    private final Map<String, Object> sharedData = new HashMap<>();

    public InertiaRenderEngine(InertiaProperties inertiaProperties) {
        this.inertiaProperties = inertiaProperties;
    }

    /**
     * Rendre une vue Inertia avec les données spécifiées.
     *
     * @param component Le nom du composant à rendre
     * @param props     Les propriétés à passer au composant
     * @param request   La requête HTTP
     * @return Le modèle de vue Inertia
     */
    public InertiaViewModel render(String component, Map<String, Object> props, HttpServletRequest request) {
        // Fusionner les données partagées avec les props spécifiques à la page
        Map<String, Object> allProps = new HashMap<>(sharedData);
        if (props != null) {
            allProps.putAll(props);
        }

        // Créer le modèle Inertia
        Map<String, Object> page = new HashMap<>();
        page.put("component", component);
        page.put("props", allProps);
        page.put("url", request.getRequestURI());
        page.put("version", inertiaProperties.getVersion());

        return new InertiaViewModel(page, isInertiaRequest(request));
    }

    /**
     * Partager des données globalement avec toutes les vues Inertia.
     *
     * @param key   La clé des données
     * @param value La valeur des données
     * @return Ce moteur de rendu (pour le chaînage)
     */
    public InertiaRenderEngine share(String key, Object value) {
        sharedData.put(key, value);
        return this;
    }

    /**
     * Vérifier si une requête est une requête Inertia.js.
     *
     * @param request La requête HTTP
     * @return true si c'est une requête Inertia, sinon false
     */
    private boolean isInertiaRequest(HttpServletRequest request) {
        return "XMLHttpRequest".equals(request.getHeader("X-Requested-With"))
                && "true".equals(request.getHeader("X-Inertia"));
    }
}
