package <%= packageName %>.service;

import <%= packageName %>.entity.Example;
import <%= packageName %>.repository.ExampleRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

/**
 * Service de gestion des exemples avec utilisation du cache
 * Exemple d'implémentation des annotations de cache Spring
 */
@Service
public class ExampleService {

    private static final Logger logger = LoggerFactory.getLogger(ExampleService.class);
    private final ExampleRepository exampleRepository;

    public ExampleService(ExampleRepository exampleRepository) {
        this.exampleRepository = exampleRepository;
    }

    /**
     * Récupère un exemple par son ID
     * Utilise le cache pour optimiser les performances
     * @param id L'identifiant de l'exemple
     * @return L'exemple ou vide si non trouvé
     */
    @Cacheable(value = "examples", key = "#id")
    <% if (database === 'MongoDB') { %>
    public Optional<Example> findById(String id) {
    <% } else { %>
    public Optional<Example> findById(Long id) {
    <% } %>
        logger.debug("Recherche de l'exemple avec ID: {}", id);
        return exampleRepository.findById(id);
    }

    /**
     * Récupère tous les exemples
     * @return Liste des exemples
     */
    @Cacheable("examples")
    public List<Example> findAll() {
        logger.debug("Récupération de tous les exemples");
        return exampleRepository.findAll();
    }

    /**
     * Crée un nouvel exemple
     * @param example L'exemple à créer
     * @return L'exemple créé avec son ID
     */
    @Transactional
    public Example create(Example example) {
        logger.debug("Création d'un nouvel exemple");
        return exampleRepository.save(example);
    }

    /**
     * Met à jour un exemple existant
     * Met également à jour l'entrée en cache
     * @param id L'identifiant de l'exemple
     * @param example Les nouvelles données
     * @return L'exemple mis à jour
     */
    @CachePut(value = "examples", key = "#id")
    @Transactional
    <% if (database === 'MongoDB') { %>
    public Example update(String id, Example example) {
    <% } else { %>
    public Example update(Long id, Example example) {
    <% } %>
        logger.debug("Mise à jour de l'exemple avec ID: {}", id);

        example.setId(id); // S'assurer que l'ID est correctement défini
        return exampleRepository.save(example);
    }

    /**
     * Supprime un exemple
     * Évince également l'entrée du cache
     * @param id L'identifiant de l'exemple à supprimer
     */
    @CacheEvict(value = "examples", key = "#id")
    @Transactional
    <% if (database === 'MongoDB') { %>
    public void delete(String id) {
    <% } else { %>
    public void delete(Long id) {
    <% } %>
        logger.debug("Suppression de l'exemple avec ID: {}", id);
        exampleRepository.deleteById(id);
    }

    /**
     * Vide le cache des exemples
     */
    @CacheEvict(value = "examples", allEntries = true)
    public void clearCache() {
        logger.info("Vidage du cache des exemples");
    }
}
