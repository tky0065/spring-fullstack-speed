package <%= packageName %>.security;

import <%= packageName %>.security.jwt.JwtAuthenticationFilter;
import <%= packageName %>.security.jwt.JwtTokenProvider;
<% if (typeof oauth2Enabled !== 'undefined' && oauth2Enabled) { %>
import <%= packageName %>.security.oauth2.CustomOAuth2UserService;
import <%= packageName %>.security.oauth2.OAuth2AuthenticationFailureHandler;
import <%= packageName %>.security.oauth2.OAuth2AuthenticationSuccessHandler;
<% } %>
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.Arrays;
import java.util.List;

/**
 * Configuration principale de la sécurité Spring Security avec JWT<% if (typeof oauth2Enabled !== 'undefined' && oauth2Enabled) { %> et OAuth2<% } %>
 */
@Configuration
@EnableWebSecurity
@EnableMethodSecurity
public class SecurityConfig {

    private final JwtTokenProvider tokenProvider;
    private final AuthEntryPointJwt unauthorizedHandler;
<% if (typeof oauth2Enabled !== 'undefined' && oauth2Enabled) { %>
    private final CustomOAuth2UserService customOAuth2UserService;
    private final OAuth2AuthenticationSuccessHandler oAuth2AuthenticationSuccessHandler;
    private final OAuth2AuthenticationFailureHandler oAuth2AuthenticationFailureHandler;
<% } %>

    public SecurityConfig(
            JwtTokenProvider tokenProvider,
            AuthEntryPointJwt unauthorizedHandler<% if (typeof oauth2Enabled !== 'undefined' && oauth2Enabled) { %>,
            CustomOAuth2UserService customOAuth2UserService,
            OAuth2AuthenticationSuccessHandler oAuth2AuthenticationSuccessHandler,
            OAuth2AuthenticationFailureHandler oAuth2AuthenticationFailureHandler<% } %>) {
        this.tokenProvider = tokenProvider;
        this.unauthorizedHandler = unauthorizedHandler;
<% if (typeof oauth2Enabled !== 'undefined' && oauth2Enabled) { %>
        this.customOAuth2UserService = customOAuth2UserService;
        this.oAuth2AuthenticationSuccessHandler = oAuth2AuthenticationSuccessHandler;
        this.oAuth2AuthenticationFailureHandler = oAuth2AuthenticationFailureHandler;
<% } %>
    }

    @Bean
    public JwtAuthenticationFilter jwtAuthenticationFilter() {
        return new JwtAuthenticationFilter(tokenProvider);
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            // Désactivation du CSRF car nous utilisons JWT
            .csrf(csrf -> csrf.disable())
            // Configuration CORS
            .cors(cors -> cors.configurationSource(corsConfigurationSource()))
            // Gestion des exceptions
            .exceptionHandling(handling -> handling
                .authenticationEntryPoint(unauthorizedHandler)
            )
            // Configuration de la politique de session
            .sessionManagement(management -> management
                <% if (typeof oauth2Enabled !== 'undefined' && oauth2Enabled) { %>
                // Utilisation d'une politique de session STATELESS pour JWT mais capable de supporter OAuth2
                .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)
                <% } else { %>
                // Utilisation d'une politique sans session car nous utilisons JWT
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                <% } %>
            )
            // Configuration des autorisations d'accès aux endpoints
            .authorizeHttpRequests(auth -> auth
                // Ressources publiques
                .requestMatchers("/api/auth/**", "/api/public/**").permitAll()
                // Documentation Swagger/OpenAPI
                .requestMatchers("/v3/api-docs/**", "/swagger-ui/**", "/swagger-ui.html").permitAll()
                // Console H2 en mode dev
                .requestMatchers("/h2-console/**").permitAll()
                <% if (frontendFramework === 'Thymeleaf' || frontendFramework === 'JTE') { %>
                // Ressources statiques pour les templates
                .requestMatchers("/css/**", "/js/**", "/images/**", "/webjars/**", "/favicon.ico").permitAll()
                <% } %>
                <% if (typeof oauth2Enabled !== 'undefined' && oauth2Enabled) { %>
                // Endpoints OAuth2
                .requestMatchers("/oauth2/**").permitAll()
                <% } %>
                // Toutes les autres requêtes nécessitent une authentification
                .anyRequest().authenticated()
            );

        <% if (typeof oauth2Enabled !== 'undefined' && oauth2Enabled) { %>
        // Configuration OAuth2
        http.oauth2Login(oauth2 -> oauth2
            .authorizationEndpoint(endpoint -> endpoint
                .baseUri("/oauth2/authorize")
            )
            .redirectionEndpoint(endpoint -> endpoint
                .baseUri("/oauth2/callback/*")
            )
            .userInfoEndpoint(endpoint -> endpoint
                .userService(customOAuth2UserService)
            )
            .successHandler(oAuth2AuthenticationSuccessHandler)
            .failureHandler(oAuth2AuthenticationFailureHandler)
        );
        <% } %>

        // Ajout du filtre JWT avant le filtre d'authentification standard
        http.addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class);

        <% if (database === 'H2') { %>
        // Pour la console H2 qui nécessite des frames
        http.headers(headers -> headers.frameOptions(options -> options.sameOrigin()));
        <% } %>

        return http.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(List.of("*")); // À configurer selon les besoins de production
        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"));
        configuration.setAllowedHeaders(Arrays.asList("Authorization", "Content-Type", "X-Requested-With"));
        configuration.setExposedHeaders(List.of("Authorization"));
        configuration.setAllowCredentials(false);
        configuration.setMaxAge(3600L);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {
        return authConfig.getAuthenticationManager();
    }
}
