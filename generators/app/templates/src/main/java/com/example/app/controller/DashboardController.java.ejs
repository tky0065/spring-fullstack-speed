package <%= packageName %>.controller;

<% if (includeAuth) { %>
import <%= packageName %>.service.UserService;
import <%= packageName %>.dto.UserDTO;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
<% } %>
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.ResponseEntity;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;

import java.util.HashMap;
import java.util.Map;
import java.util.Arrays;
import java.util.List;

/**
 * Contrôleur REST pour les endpoints du tableau de bord.
 * Ce contrôleur expose les API accessibles uniquement aux utilisateurs authentifiés.
 */
@RestController
@RequestMapping("/api/dashboard")
<% if (includeAuth) { %>
@PreAuthorize("isAuthenticated()")
<% } %>
@Tag(name = "Dashboard", description = "API du tableau de bord")
public class DashboardController {

    <% if (includeAuth) { %>
    private final UserService userService;

    @Autowired
    public DashboardController(UserService userService) {
        this.userService = userService;
    }
    <% } %>

    /**
     * Endpoint pour récupérer les données principales du tableau de bord
     */
    @GetMapping
    @Operation(summary = "Récupère les données du tableau de bord principal")
    public ResponseEntity<Map<String, Object>> getDashboardData() {
        Map<String, Object> dashboardData = new HashMap<>();

        <% if (includeAuth) { %>
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        UserDTO currentUser = userService.getCurrentUser();
        dashboardData.put("currentUser", currentUser);
        <% } %>

        dashboardData.put("title", "Tableau de bord");
        dashboardData.put("stats", Map.of(
            "users", 42,
            "articles", 148,
            "comments", 358,
            "views", 12589
        ));

        return ResponseEntity.ok(dashboardData);
    }

    /**
     * Endpoint pour récupérer les données de profil utilisateur
     */
    @GetMapping("/profile")
    @Operation(summary = "Récupère les données de profil de l'utilisateur")
    public ResponseEntity<Map<String, Object>> getProfileData() {
        Map<String, Object> profileData = new HashMap<>();
        profileData.put("title", "Mon profil");

        <% if (includeAuth) { %>
        UserDTO currentUser = userService.getCurrentUser();
        profileData.put("user", currentUser);
        <% } else { %>
        Map<String, Object> currentUser = new HashMap<>();
        currentUser.put("name", "Utilisateur Démo");
        currentUser.put("email", "demo@example.com");
        profileData.put("user", currentUser);
        <% } %>

        profileData.put("activities", Arrays.asList(
            Map.of(
                "date", "2025-06-18T14:30:00",
                "type", "login",
                "description", "Connexion réussie"
            ),
            Map.of(
                "date", "2025-06-17T11:15:00",
                "type", "update",
                "description", "Profil mis à jour"
            ),
            Map.of(
                "date", "2025-06-15T09:30:00",
                "type", "login",
                "description", "Connexion réussie"
            )
        ));

        return ResponseEntity.ok(profileData);
    }

    /**
     * Endpoint pour récupérer les paramètres utilisateur
     */
    @GetMapping("/settings")
    @Operation(summary = "Récupère les paramètres de l'utilisateur")
    public ResponseEntity<Map<String, Object>> getSettingsData() {
        Map<String, Object> settingsData = new HashMap<>();
        settingsData.put("title", "Paramètres");

        Map<String, Object> settings = new HashMap<>();
        settings.put("notifications", true);
        settings.put("twoFactorAuth", false);
        settings.put("theme", "light");
        settings.put("language", "fr");
        settingsData.put("settings", settings);

        settingsData.put("availableLanguages", Arrays.asList(
            Map.of("code", "fr", "name", "Français"),
            Map.of("code", "en", "name", "English"),
            Map.of("code", "es", "name", "Español"),
            Map.of("code", "de", "name", "Deutsch")
        ));

        settingsData.put("availableThemes", Arrays.asList(
            Map.of("code", "light", "name", "Clair"),
            Map.of("code", "dark", "name", "Sombre"),
            Map.of("code", "system", "name", "Système")
        ));

        return ResponseEntity.ok(settingsData);
    }

    /**
     * Endpoint pour récupérer les données tabulaires
     */
    @GetMapping("/data")
    @Operation(summary = "Récupère des données tabulaires pour la gestion des projets")
    public ResponseEntity<Map<String, Object>> getTableData() {
        Map<String, Object> response = new HashMap<>();
        response.put("title", "Gestion des données");

        List<Map<String, Object>> tableData = Arrays.asList(
            Map.of(
                "id", 1,
                "name", "Projet A",
                "status", "Actif",
                "created", "2025-01-15"
            ),
            Map.of(
                "id", 2,
                "name", "Projet B",
                "status", "Terminé",
                "created", "2025-02-20"
            ),
            Map.of(
                "id", 3,
                "name", "Projet C",
                "status", "En pause",
                "created", "2025-03-10"
            ),
            Map.of(
                "id", 4,
                "name", "Projet D",
                "status", "Actif",
                "created", "2025-05-05"
            ),
            Map.of(
                "id", 5,
                "name", "Projet E",
                "status", "Planifié",
                "created", "2025-06-01"
            )
        );
        response.put("items", tableData);

        response.put("pagination", Map.of(
            "current", 1,
            "total", 5,
            "perPage", 10,
            "totalItems", 45
        ));

        return ResponseEntity.ok(response);
    }
}
