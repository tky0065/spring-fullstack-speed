package <%= packageName %>.controller;

import <%= packageName %>.inertia.InertiaHelper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.HashMap;
import java.util.Map;
import java.util.Arrays;
import java.util.List;

/**
 * Contrôleur principal utilisant Inertia.js pour le rendu des pages.
 * Ce contrôleur gère les pages publiques de l'application.
 */
@Controller
public class InertiaController {

    private final InertiaHelper inertiaHelper;

    @Autowired
    public InertiaController(InertiaHelper inertiaHelper) {
        this.inertiaHelper = inertiaHelper;
    }

    /**
     * Page d'accueil rendue avec Inertia.
     *
     * @return Vue Inertia pour la page d'accueil
     */
    @GetMapping("/")
    public String index() {
        Map<String, Object> props = new HashMap<>();
        props.put("title", "Accueil");
        props.put("message", "Bienvenue dans votre application Spring Boot + Inertia.js!");
        props.put("features", Arrays.asList(
            "Spring Boot 3.x",
            "Inertia.js",
            <% if (frontendFramework.includes('React')) { %>
            "React avec TypeScript",
            <% } else if (frontendFramework.includes('Vue')) { %>
            "Vue.js 3 avec TypeScript",
            <% } else if (frontendFramework.includes('Angular')) { %>
            "Angular avec TypeScript",
            <% } %>
            <% if (database === 'MySQL') { %>
            "MySQL",
            <% } else if (database === 'PostgreSQL') { %>
            "PostgreSQL",
            <% } else if (database === 'MongoDB') { %>
            "MongoDB",
            <% } else if (database === 'H2') { %>
            "H2 Database",
            <% } %>
            <% if (includeAuth) { %>
            "Authentification JWT",
            <% } %>
            "API RESTful"
        ));

        return inertiaHelper.render("Home", props);
    }

    /**
     * Page "À propos" avec Inertia.
     *
     * @return Vue Inertia pour la page "À propos"
     */
    @GetMapping("/about")
    public String about() {
        // Utilisation de la syntaxe simplifiée pour les props
        return inertiaHelper.render("About",
            "title", "À propos",
            "description", "Cette application a été générée avec Spring-Fullstack-Speed.",
            "version", "1.0.0",
            "creator", "Generated with SFS CLI",
            "year", java.time.Year.now().getValue()
        );
    }

    /**
     * Page de contact avec exemple de formulaire
     */
    @GetMapping("/contact")
    public String contact(@RequestParam(required = false) String success) {
        boolean showSuccess = "true".equals(success);

        return inertiaHelper.render("Contact",
            "title", "Contact",
            "showSuccess", showSuccess,
            "formDefaults", Map.of(
                "name", "",
                "email", "",
                "subject", "",
                "message", ""
            )
        );
    }

    /**
     * Page de présentation des fonctionnalités
     */
    @GetMapping("/features")
    public String features() {
        List<Map<String, Object>> featureList = Arrays.asList(
            Map.of(
                "title", "Spring Boot 3.x",
                "description", "Framework robuste pour le développement d'applications Java",
                "icon", "server"
            ),
            Map.of(
                "title", "Inertia.js",
                "description", "Créez des applications monolithiques avec des interfaces modernes",
                "icon", "refresh"
            ),
            <% if (frontendFramework.includes('React')) { %>
            Map.of(
                "title", "React avec TypeScript",
                "description", "Bibliothèque frontend puissante avec typage statique",
                "icon", "react"
            ),
            <% } else if (frontendFramework.includes('Vue')) { %>
            Map.of(
                "title", "Vue.js 3 avec TypeScript",
                "description", "Framework JavaScript progressif avec typage statique",
                "icon", "vue"
            ),
            <% } else if (frontendFramework.includes('Angular')) { %>
            Map.of(
                "title", "Angular avec TypeScript",
                "description", "Plateforme complète pour le développement d'applications",
                "icon", "angular"
            ),
            <% } %>
            <% if (database === 'MySQL') { %>
            Map.of(
                "title", "MySQL",
                "description", "Base de données relationnelle performante",
                "icon", "database"
            ),
            <% } else if (database === 'PostgreSQL') { %>
            Map.of(
                "title", "PostgreSQL",
                "description", "Base de données relationnelle avancée et extensible",
                "icon", "database"
            ),
            <% } else if (database === 'MongoDB') { %>
            Map.of(
                "title", "MongoDB",
                "description", "Base de données NoSQL orientée documents",
                "icon", "database"
            ),
            <% } else if (database === 'H2') { %>
            Map.of(
                "title", "H2 Database",
                "description", "Base de données en mémoire rapide",
                "icon", "database"
            ),
            <% } %>
            Map.of(
                "title", "API RESTful",
                "description", "Architecture API moderne et flexible",
                "icon", "api"
            )
        );

        return inertiaHelper.render("Features",
            "title", "Fonctionnalités",
            "features", featureList
        );
    }

    /**
     * Page d'exemple avec gestion des erreurs
     */
    @GetMapping("/demo/errors")
    public String demoErrors(@RequestParam(required = false) String type) {
        Map<String, Object> props = new HashMap<>();
        props.put("title", "Démonstration des erreurs");

        // Simuler différents types d'erreurs pour la démonstration
        if ("validation".equals(type)) {
            Map<String, String> errors = new HashMap<>();
            errors.put("email", "L'adresse e-mail est invalide");
            errors.put("password", "Le mot de passe doit contenir au moins 8 caractères");
            props.put("errors", errors);
        } else if ("server".equals(type)) {
            props.put("serverError", "Une erreur serveur s'est produite. Veuillez réessayer plus tard.");
        }

        return inertiaHelper.render("Demo/Errors", props);
    }
}
