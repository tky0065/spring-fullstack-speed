package <%= packageName %>.controller;

import <%= packageName %>.entity.Role;
import <%= packageName %>.entity.User;
import <%= packageName %>.repository.RoleRepository;
import <%= packageName %>.repository.UserRepository;
import <%= packageName %>.security.jwt.JwtTokenProvider;
import <%= packageName %>.dto.AuthenticationRequest;
import <%= packageName %>.dto.AuthenticationResponse;
import <%= packageName %>.dto.RegisterRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * Contrôleur pour gérer l'authentification et l'enregistrement des utilisateurs
 */
@RestController
@RequestMapping("/api/auth")
@Tag(name = "Authentication", description = "API d'authentification")
public class AuthController {

    private final AuthenticationManager authenticationManager;
    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final PasswordEncoder passwordEncoder;
    private final JwtTokenProvider tokenProvider;

    public AuthController(
            AuthenticationManager authenticationManager,
            UserRepository userRepository,
            RoleRepository roleRepository,
            PasswordEncoder passwordEncoder,
            JwtTokenProvider tokenProvider) {
        this.authenticationManager = authenticationManager;
        this.userRepository = userRepository;
        this.roleRepository = roleRepository;
        this.passwordEncoder = passwordEncoder;
        this.tokenProvider = tokenProvider;
    }

    /**
     * Endpoint pour l'authentification des utilisateurs
     */
    @PostMapping("/login")
    @Operation(summary = "Authentifier un utilisateur",
            description = "Permet à un utilisateur de se connecter avec son nom d'utilisateur et mot de passe")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Authentification réussie",
                    content = @Content(schema = @Schema(implementation = AuthenticationResponse.class))),
            @ApiResponse(responseCode = "401", description = "Nom d'utilisateur ou mot de passe incorrect")
    })
    public ResponseEntity<AuthenticationResponse> authenticateUser(
            @Valid @RequestBody AuthenticationRequest loginRequest) {

        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        loginRequest.getUsername(),
                        loginRequest.getPassword()
                )
        );

        SecurityContextHolder.getContext().setAuthentication(authentication);
        String jwt = tokenProvider.createToken(authentication, loginRequest.isRememberMe());

        return ResponseEntity.ok(new AuthenticationResponse(jwt));
    }

    /**
     * Endpoint pour l'enregistrement de nouveaux utilisateurs
     */
    @PostMapping("/register")
    @Operation(summary = "Enregistrer un nouvel utilisateur",
            description = "Permet de créer un nouveau compte utilisateur")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Enregistrement réussi"),
            @ApiResponse(responseCode = "400", description = "Nom d'utilisateur ou email déjà utilisé")
    })
    public ResponseEntity<?> registerUser(@Valid @RequestBody RegisterRequest signUpRequest) {
        if (userRepository.existsByUsername(signUpRequest.getUsername())) {
            throw new ResponseStatusException(
                    HttpStatus.BAD_REQUEST, "Erreur: Ce nom d'utilisateur est déjà pris!");
        }

        if (userRepository.existsByEmail(signUpRequest.getEmail())) {
            throw new ResponseStatusException(
                    HttpStatus.BAD_REQUEST, "Erreur: Cet email est déjà utilisé!");
        }

        // Création du compte utilisateur
        User user = new User();
        user.setUsername(signUpRequest.getUsername());
        user.setEmail(signUpRequest.getEmail());
        user.setPassword(passwordEncoder.encode(signUpRequest.getPassword()));
        user.setFirstName(signUpRequest.getFirstName());
        user.setLastName(signUpRequest.getLastName());

        // Par défaut, attribuer le rôle "ROLE_USER"
        Set<Role> roles = new HashSet<>();
        Role userRole = roleRepository.findByName("ROLE_USER")
                .orElseThrow(() -> new ResponseStatusException(
                        HttpStatus.INTERNAL_SERVER_ERROR, "Erreur: Rôle utilisateur non trouvé."));
        roles.add(userRole);
        user.setRoles(roles);

        userRepository.save(user);

        return ResponseEntity.ok().body(Map.of("message", "Utilisateur enregistré avec succès!"));
    }

    /**
     * Endpoint pour obtenir des informations sur l'utilisateur actuellement connecté via OAuth2
     */
    @GetMapping("/user/me")
    @Operation(summary = "Obtenir les informations de l'utilisateur connecté",
            description = "Récupère les informations de l'utilisateur actuellement authentifié")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Informations récupérées avec succès"),
            @ApiResponse(responseCode = "401", description = "Utilisateur non authentifié")
    })
    public ResponseEntity<?> getCurrentUser(@AuthenticationPrincipal OAuth2User principal) {
        return ResponseEntity.ok(principal.getAttributes());
    }

    /**
     * Endpoint pour la déconnexion
     */
    @PostMapping("/logout")
    @Operation(summary = "Déconnecter l'utilisateur",
            description = "Déconnecte l'utilisateur actuellement authentifié")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Déconnexion réussie")
    })
    public ResponseEntity<?> logoutUser(HttpServletRequest request) {
        // La déconnexion côté serveur est gérée par Spring Security
        // Ce endpoint permet au client de supprimer le token JWT côté client

        return ResponseEntity.ok().body(Map.of("message", "Déconnecté avec succès!"));
    }
}
