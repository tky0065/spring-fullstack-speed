package <%= packageName %>.inertia;

import io.github.inertia4j.Inertia;
import org.springframework.stereotype.Component;
import org.springframework.ui.Model;
import org.springframework.web.servlet.ModelAndView;

import java.util.HashMap;
import java.util.Map;

/**
 * Helper pour faciliter l'utilisation d'Inertia.js dans les contrôleurs.
 */
@Component
public class InertiaHelper {

    /**
     * Rend un composant Inertia avec les props fournis.
     *
     * @param component Nom du composant frontend à rendre
     * @param props Propriétés à passer au composant
     * @return Vue Inertia
     */
    public String render(String component, Map<String, Object> props) {
        return Inertia.render(component, props);
    }

    /**
     * Rend un composant Inertia avec un modèle Spring MVC.
     *
     * @param component Nom du composant frontend à rendre
     * @param model Modèle Spring MVC contenant les attributs
     * @return Vue Inertia
     */
    public String render(String component, Model model) {
        Map<String, Object> props = new HashMap<>();
        model.asMap().forEach(props::put);
        return Inertia.render(component, props);
    }

    /**
     * Rend un composant Inertia avec les props fournis sous forme de paires clé-valeur.
     *
     * @param component Nom du composant frontend à rendre
     * @param propsKeyValues Paires clé-valeur à ajouter aux props (doit être un nombre pair d'arguments)
     * @return Vue Inertia
     */
    public String render(String component, Object... propsKeyValues) {
        if (propsKeyValues.length % 2 != 0) {
            throw new IllegalArgumentException("Les props doivent être fournis en paires clé-valeur");
        }

        Map<String, Object> props = new HashMap<>();
        for (int i = 0; i < propsKeyValues.length; i += 2) {
            props.put((String) propsKeyValues[i], propsKeyValues[i + 1]);
        }

        return Inertia.render(component, props);
    }

    /**
     * Partage une valeur avec toutes les requêtes Inertia suivantes.
     *
     * @param key Clé pour la valeur partagée
     * @param value Valeur à partager
     */
    public void share(String key, Object value) {
        Inertia.share(key, value);
    }

    /**
     * Définit des données flash pour la prochaine requête.
     *
     * @param key Clé pour la valeur flash
     * @param value Valeur flash
     */
    public void flash(String key, Object value) {
        Inertia.flash(key, value);
    }
}
