package com.example.app.config;

import org.apache.kafka.clients.admin.AdminClientConfig;
import org.apache.kafka.clients.admin.NewTopic;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.annotation.EnableKafka;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.core.*;
import org.springframework.kafka.listener.ContainerProperties;
import org.springframework.kafka.listener.DefaultErrorHandler;
import org.springframework.kafka.support.serializer.JsonDeserializer;
import org.springframework.kafka.support.serializer.JsonSerializer;
import org.springframework.util.backoff.FixedBackOff;

import java.util.HashMap;
import java.util.Map;

/**
 * Configuration pour l'intégration d'Apache Kafka
 * Cette classe configure les connexions et les composants principaux pour utiliser Kafka
 */
@Configuration
@EnableKafka
@ConditionalOnProperty(name = "spring.kafka.enabled", havingValue = "true", matchIfMissing = false)
public class KafkaConfig {

    @Value("${spring.kafka.bootstrap-servers:localhost:9092}")
    private String bootstrapServers;

    @Value("${spring.kafka.producer.client-id:app-producer}")
    private String producerClientId;

    @Value("${spring.kafka.consumer.group-id:app-consumer-group}")
    private String consumerGroupId;

    // Noms des topics Kafka
    public static final String TOPIC_EVENTS = "app.events";
    public static final String TOPIC_ANALYTICS = "app.analytics";
    public static final String TOPIC_USER_ACTIVITY = "app.user-activity";
    public static final String TOPIC_NOTIFICATIONS = "app.notifications";

    // Nombre de partitions et facteur de réplication par défaut
    private static final int DEFAULT_PARTITION_COUNT = 3;
    private static final short DEFAULT_REPLICATION_FACTOR = 1; // Augmenter en production

    /**
     * Configuration pour le client Kafka Admin
     */
    @Bean
    public KafkaAdmin kafkaAdmin() {
        Map<String, Object> configs = new HashMap<>();
        configs.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        return new KafkaAdmin(configs);
    }

    /**
     * Configuration pour le producteur Kafka
     */
    @Bean
    public ProducerFactory<String, Object> producerFactory() {
        Map<String, Object> configProps = new HashMap<>();
        configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        configProps.put(ProducerConfig.CLIENT_ID_CONFIG, producerClientId);
        configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);

        // Configurations pour la fiabilité
        configProps.put(ProducerConfig.ACKS_CONFIG, "all");
        configProps.put(ProducerConfig.RETRIES_CONFIG, 3);
        configProps.put(ProducerConfig.BATCH_SIZE_CONFIG, 16384);
        configProps.put(ProducerConfig.LINGER_MS_CONFIG, 1);
        configProps.put(ProducerConfig.BUFFER_MEMORY_CONFIG, 33554432);

        return new DefaultKafkaProducerFactory<>(configProps);
    }

    /**
     * Template pour envoyer des messages à Kafka
     */
    @Bean
    public KafkaTemplate<String, Object> kafkaTemplate() {
        return new KafkaTemplate<>(producerFactory());
    }

    /**
     * Configuration pour le consommateur Kafka
     */
    @Bean
    public ConsumerFactory<String, Object> consumerFactory() {
        Map<String, Object> props = new HashMap<>();
        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        props.put(ConsumerConfig.GROUP_ID_CONFIG, consumerGroupId);
        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class);
        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");
        props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, false);
        props.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, 100);

        // Configurer le JsonDeserializer pour accepter tous les types
        props.put(JsonDeserializer.TRUSTED_PACKAGES, "*");

        return new DefaultKafkaConsumerFactory<>(props);
    }

    /**
     * Factory pour les listeners Kafka
     */
    @Bean
    public ConcurrentKafkaListenerContainerFactory<String, Object> kafkaListenerContainerFactory() {
        ConcurrentKafkaListenerContainerFactory<String, Object> factory = new ConcurrentKafkaListenerContainerFactory<>();
        factory.setConsumerFactory(consumerFactory());
        factory.setConcurrency(3); // Nombre de threads consommateurs par topic
        factory.setBatchListener(true); // Activer le traitement par lots

        // Configuration du mode d'acquittement
        factory.getContainerProperties().setAckMode(ContainerProperties.AckMode.MANUAL_IMMEDIATE);

        // Configuration du gestionnaire d'erreurs
        DefaultErrorHandler errorHandler = new DefaultErrorHandler(
                // Réessayer après 1s, 2s, 3s
                new FixedBackOff(1000L, 3));
        factory.setCommonErrorHandler(errorHandler);

        return factory;
    }

    /**
     * Création des topics Kafka
     */
    @Bean
    public NewTopic eventsTopic() {
        return new NewTopic(TOPIC_EVENTS, DEFAULT_PARTITION_COUNT, DEFAULT_REPLICATION_FACTOR);
    }

    @Bean
    public NewTopic analyticsTopic() {
        return new NewTopic(TOPIC_ANALYTICS, DEFAULT_PARTITION_COUNT, DEFAULT_REPLICATION_FACTOR);
    }

    @Bean
    public NewTopic userActivityTopic() {
        return new NewTopic(TOPIC_USER_ACTIVITY, DEFAULT_PARTITION_COUNT, DEFAULT_REPLICATION_FACTOR);
    }

    @Bean
    public NewTopic notificationsTopic() {
        return new NewTopic(TOPIC_NOTIFICATIONS, DEFAULT_PARTITION_COUNT, DEFAULT_REPLICATION_FACTOR);
    }
}
