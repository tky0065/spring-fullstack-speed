# Configuration Spring Boot pour <%= appName %>
# Généré par Spring-Fullstack-Speed (SFS)

spring:
  application:
    name: <%= appName %>
  profiles:
    active: dev  # Profil actif par défaut

  # Configuration commune de la base de données
<% if (database === 'MongoDB') { %>
  data:
    mongodb:
      host: localhost
      port: 27017
      database: <%= appName %>
      auto-index-creation: true
      uuid-representation: standard
      field-naming-strategy: org.springframework.data.mapping.model.SnakeCaseFieldNamingStrategy
<% } else { %>
  datasource:
    hikari:
      minimum-idle: 5
      maximum-pool-size: 20
      idle-timeout: 30000
      pool-name: <%= appName %>HikariCP
      max-lifetime: 2000000
      connection-timeout: 30000
<% } %>

<% if (database !== 'MongoDB') { %>
  # Configuration JPA
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
<% if (database === 'MySQL') { %>
        dialect: org.hibernate.dialect.MySQL8Dialect
        jdbc:
          time_zone: UTC
        # Optimisations MySQL spécifiques
        order_inserts: true
        order_updates: true
        batch_versioned_data: true
        batch_size: 30
<% } else if (database === 'PostgreSQL') { %>
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          batch_size: 25
          batch_versioned_data: true
          order_inserts: true
          order_updates: true
          time_zone: UTC
        # Optimisations PostgreSQL spécifiques
        temp:
          use_jdbc_metadata_defaults: false
        default_schema: public
<% } else if (database === 'H2') { %>
        dialect: org.hibernate.dialect.H2Dialect
<% } %>
    open-in-view: false
<% } %>

<% if (additionalFeatures.includes('redis')) { %>
  # Configuration Redis
  redis:
    host: localhost
    port: 6379
    timeout: 2000
  cache:
    type: redis
    redis:
      time-to-live: 3600000
      cache-null-values: false
<% } %>

<% if (frontendFramework === 'Thymeleaf') { %>
  # Configuration Thymeleaf
  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    mode: HTML
    encoding: UTF-8
    cache: false
<% } else if (frontendFramework === 'JTE') { %>
  # Configuration JTE
gg:
  jte:
    developmentMode: true
    templateLocation: src/main/resources/templates
<% } %>

  # Configuration des messages internationaux
  messages:
    basename: i18n/messages
    encoding: UTF-8
    cache-duration: 3600

<% if (additionalFeatures.includes('openapi')) { %>
# Configuration OpenAPI/Swagger
springdoc:
  api-docs:
    path: /api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    url: /api-docs
    operationsSorter: alpha
    tagsSorter: alpha
    disable-swagger-default-url: true
    display-request-duration: true
  packages-to-scan: <%= packageName %>.controller
  paths-to-match: /api/**
  show-actuator: true
  default-produces-media-type: application/json
<% } %>

<% if (!authType || authType === 'JWT' || authType === 'JWT+OAuth2') { %>
# Configuration JWT
jwt:
  secret: ${JWT_SECRET:<%= Buffer.from(Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)).toString('base64') %>}
  expirationMs: 3600000  # 1 heure en millisecondes
  refreshExpirationMs: 604800000  # 7 jours en millisecondes
<% } %>

# Configuration de l'application
app:
  frontend: <%= frontendFramework.toLowerCase() %>
<% if (additionalFeatures.includes('openapi')) { %>
  # Configuration OpenAPI
  api:
    title: "<%= appName %> API"
    version: "1.0.0"
    description: "API Documentation for <%= appName %>"
<% } %>

# Configurations spécifiques aux profils
---
spring:
  config:
    activate:
      on-profile: dev
<% if (database === 'H2') { %>
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:devdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password:
  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        trace: false
        web-allow-others: false
<% } else if (database === 'MySQL') { %>
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/<%= appName.toLowerCase() %>_dev?useSSL=false&allowPublicKeyRetrieval=true&createDatabaseIfNotExist=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
    username: root
    password: root
<% } else if (database === 'PostgreSQL') { %>
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/<%= appName.toLowerCase() %>_dev
    username: postgres
    password: postgres
<% } %>

<% if (migrations === 'Flyway') { %>
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
<% } else if (migrations === 'Liquibase') { %>
  liquibase:
    enabled: true
    change-log: classpath:db/changelog/db.changelog-master.xml
<% } %>

<% if (additionalFeatures.includes('openapi')) { %>
# Configuration OpenAPI pour le profil dev
springdoc:
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
  api-docs:
    path: /v3/api-docs
    enabled: true
  packages-to-scan: <%= packageName %>.controller
  show-actuator: true
<% } %>

---
spring:
  config:
    activate:
      on-profile: test
<% if (database === 'H2') { %>
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password:
<% } else if (database === 'MySQL') { %>
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/<%= appName.toLowerCase() %>_test?useSSL=false&allowPublicKeyRetrieval=true&createDatabaseIfNotExist=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
    username: root
    password: root
<% } else if (database === 'PostgreSQL') { %>
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/<%= appName.toLowerCase() %>_test
    username: postgres
    password: postgres
<% } %>

---
spring:
  config:
    activate:
      on-profile: prod
  jpa:
    show-sql: false
<% if (database === 'MySQL') { %>
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:<%= appName.toLowerCase() %>}?useSSL=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:}
<% } else if (database === 'PostgreSQL') { %>
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:<%= appName.toLowerCase() %>}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
<% } %>

<% if (migrations === 'Flyway') { %>
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
<% } else if (migrations === 'Liquibase') { %>
  liquibase:
    enabled: true
    change-log: classpath:db/changelog/db.changelog-master.xml
<% } %>

# Configuration serveur
server:
  port: ${SERVER_PORT:8080}
  error:
    whitelabel:
      enabled: false
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,application/javascript,application/json
    min-response-size: 1024
  servlet:
    context-path: /
    session:
      cookie:
        http-only: true
        secure: true

# Permettre à l'application de chercher un port disponible si le port configuré est occupé
spring:
  web:
    resources:
      add-mappings: true
  boot:
    admin:
      client:
        enabled: false

# Logging configuration
logging:
  level:
    root: INFO
    <%= packageName %>: DEBUG
    org.hibernate.SQL: INFO
    org.springframework.web: INFO
  file:
    name: ${LOG_PATH:/tmp}/logs/<%= appName %>.log
