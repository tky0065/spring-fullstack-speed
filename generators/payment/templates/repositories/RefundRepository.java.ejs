package <%= packageName %>.repository;

import <%= packageName %>.domain.Refund;
import <%= packageName %>.domain.Transaction;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.math.BigDecimal;
import java.time.Instant;
import java.util.List;
import java.util.Optional;

/**
 * Repository Spring Data JPA pour l'entité Refund.
 */
@Repository
public interface RefundRepository extends JpaRepository<Refund, Long> {

    /**
     * Trouve un remboursement par son identifiant unique.
     *
     * @param refundId l'identifiant unique du remboursement
     * @return le remboursement si trouvé
     */
    Optional<Refund> findByRefundId(String refundId);

    /**
     * Trouve tous les remboursements pour une transaction donnée.
     *
     * @param transaction la transaction
     * @return la liste des remboursements
     */
    List<Refund> findByTransaction(Transaction transaction);

    /**
     * Trouve tous les remboursements pour un identifiant de transaction donné.
     *
     * @param transactionId l'ID de la transaction
     * @return la liste des remboursements
     */
    @Query("SELECT r FROM Refund r WHERE r.transaction.id = :transactionId")
    List<Refund> findByTransactionId(@Param("transactionId") Long transactionId);

    /**
     * Trouve les remboursements par statut.
     *
     * @param status le statut à rechercher
     * @return la liste des remboursements avec le statut spécifié
     */
    List<Refund> findByStatus(String status);

    /**
     * Trouve les remboursements créés entre deux dates.
     *
     * @param startDate la date de début
     * @param endDate la date de fin
     * @return la liste des remboursements créés dans l'intervalle
     */
    List<Refund> findByCreatedDateBetween(Instant startDate, Instant endDate);

    /**
     * Trouve les remboursements traités entre deux dates.
     *
     * @param startDate la date de début
     * @param endDate la date de fin
     * @return la liste des remboursements traités dans l'intervalle
     */
    List<Refund> findByProcessedDateBetween(Instant startDate, Instant endDate);

    /**
     * Calcule le montant total des remboursements pour une transaction donnée.
     *
     * @param transactionId l'ID de la transaction
     * @return le montant total des remboursements
     */
    @Query("SELECT SUM(r.amount) FROM Refund r WHERE r.transaction.id = :transactionId")
    BigDecimal sumAmountByTransactionId(@Param("transactionId") Long transactionId);

    /**
     * Trouve les remboursements avec un montant supérieur à la valeur donnée.
     *
     * @param amount le montant minimum
     * @return la liste des remboursements
     */
    List<Refund> findByAmountGreaterThan(BigDecimal amount);

    /**
     * Trouve les remboursements par motif.
     *
     * @param reason le motif de remboursement
     * @return la liste des remboursements
     */
    List<Refund> findByReasonContaining(String reason);

    /**
     * Trouve les remboursements avec une référence de provider spécifique.
     *
     * @param providerReference la référence du provider
     * @return un remboursement optionnel si trouvé
     */
    Optional<Refund> findByProviderReference(String providerReference);
}
