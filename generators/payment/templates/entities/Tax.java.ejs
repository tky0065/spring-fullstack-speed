package <%= packageName %>.domain;

import java.math.BigDecimal;
import java.time.Instant;
import javax.persistence.*;

import lombok.Getter;
import lombok.Setter;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.Builder;

/**
 * Entité représentant une taxe.
 * Utilisée pour la gestion des taxes dans le système de paiement.
 */
@Entity
@Table(name = "payment_tax")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Tax {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    private String taxId;

    @Column(nullable = false)
    private String name;

    @Column(nullable = false)
    private String description;

    @Column(nullable = false)
    private BigDecimal rate;

    @Column(name = "is_active")
    private boolean isActive;

    @Column(name = "tax_type")
    private String taxType; // 'VAT', 'GST', 'SALES_TAX', etc.

    @Column(name = "country_code")
    private String countryCode;

    @Column(name = "region")
    private String region; // État, province ou autre division régionale

    @Column(name = "postal_code")
    private String postalCode;

    @Column(name = "created_at")
    private Instant createdAt;

    @Column(name = "updated_at")
    private Instant updatedAt;

    /**
     * Calcule le montant de taxe pour un montant donné.
     *
     * @param amount Le montant avant taxe
     * @return Le montant de la taxe calculé
     */
    @Transient
    public BigDecimal calculateTaxAmount(BigDecimal amount) {
        if (amount == null || rate == null) {
            return BigDecimal.ZERO;
        }
        return amount.multiply(rate.divide(new BigDecimal("100")));
    }

    /**
     * Retourne le montant total incluant la taxe.
     *
     * @param amount Le montant avant taxe
     * @return Le montant incluant la taxe
     */
    @Transient
    public BigDecimal calculateTotalWithTax(BigDecimal amount) {
        if (amount == null) {
            return BigDecimal.ZERO;
        }
        return amount.add(calculateTaxAmount(amount));
    }

    @PrePersist
    protected void onCreate() {
        createdAt = Instant.now();
        updatedAt = Instant.now();

        if (taxId == null || taxId.isEmpty()) {
            taxId = "TAX_" + System.currentTimeMillis();
        }
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = Instant.now();
    }
}
