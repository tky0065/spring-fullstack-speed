package <%= packageName %>.domain;

import java.math.BigDecimal;
import java.time.Instant;
import java.time.LocalDate;
import java.util.UUID;
import java.util.List;
import java.util.ArrayList;

import javax.persistence.*;

import lombok.Getter;
import lombok.Setter;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.Builder;

/**
 * Entité représentant une facture.
 * Enregistre les informations de facturation pour les paiements.
 */
@Entity
@Table(name = "payment_invoice")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Invoice {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    private String invoiceId;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "customer_id")
    private Customer customer;

    @Column(nullable = false)
    private String status; // 'draft', 'open', 'paid', 'uncollectible', 'void'

    @Column(name = "invoice_number")
    private String invoiceNumber;

    @Column(name = "invoice_date")
    private LocalDate invoiceDate;

    @Column(name = "due_date")
    private LocalDate dueDate;

    @Column(nullable = false)
    private BigDecimal amount;

    @Column(name = "amount_paid")
    private BigDecimal amountPaid;

    @Column(name = "amount_due")
    private BigDecimal amountDue;

    @Column(nullable = false)
    private String currency;

    @Column(name = "tax_percent")
    private BigDecimal taxPercent;

    @Column(name = "tax_amount")
    private BigDecimal taxAmount;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "subscription_id")
    private Subscription subscription;

    @Column(name = "payment_intent_id")
    private String paymentIntentId;

    @Column(name = "provider_reference")
    private String providerReference;

    @Column(length = 1000)
    private String description;

    @OneToMany(mappedBy = "invoice", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<InvoiceItem> items = new ArrayList<>();

    @Column(name = "created_date", nullable = false)
    private Instant createdDate;

    @Column(name = "updated_date")
    private Instant updatedDate;

    @Column(name = "paid_date")
    private Instant paidDate;

    @Column(name = "pdf_url")
    private String pdfUrl;

    @Column(name = "hosted_invoice_url")
    private String hostedInvoiceUrl;

    @PrePersist
    protected void onCreate() {
        this.invoiceId = UUID.randomUUID().toString();
        this.createdDate = Instant.now();
        if (this.status == null) {
            this.status = "draft";
        }
        if (this.invoiceDate == null) {
            this.invoiceDate = LocalDate.now();
        }
    }

    @PreUpdate
    protected void onUpdate() {
        this.updatedDate = Instant.now();
        // Si le statut est mis à jour à "paid", enregistrer la date de paiement
        if ("paid".equals(this.status) && this.paidDate == null) {
            this.paidDate = Instant.now();
        }
    }
}
