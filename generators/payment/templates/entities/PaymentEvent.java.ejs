package <%= packageName %>.domain;

import java.time.Instant;
import java.util.UUID;

import javax.persistence.*;

import lombok.Getter;
import lombok.Setter;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.Builder;

/**
 * Entité représentant un événement lié au paiement.
 * Utilisée pour le stockage et le traitement des événements provenant des webhooks des fournisseurs de paiement.
 */
@Entity
@Table(name = "payment_event")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class PaymentEvent {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    private String eventId;

    @Column(nullable = false)
    private String provider; // 'stripe', 'paypal', etc.

    @Column(nullable = false)
    private String eventType;

    @Column(nullable = false, columnDefinition = "TEXT")
    private String payload;

    @Column(nullable = false)
    private String status; // 'RECEIVED', 'PROCESSED', 'FAILED'

    @Column(name = "provider_event_id")
    private String providerEventId;

    @Column(name = "created_date", nullable = false)
    private Instant createdDate;

    @Column(name = "processed_date")
    private Instant processedDate;

    @Column(name = "error_message", columnDefinition = "TEXT")
    private String errorMessage;

    @PrePersist
    protected void onCreate() {
        this.eventId = UUID.randomUUID().toString();
        this.createdDate = Instant.now();
        if (this.status == null) {
            this.status = "RECEIVED";
        }
    }

    @PreUpdate
    protected void onUpdate() {
        if ("PROCESSED".equals(this.status) && this.processedDate == null) {
            this.processedDate = Instant.now();
        }
    }
}
