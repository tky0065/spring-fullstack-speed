package <%= packageName %>.service.reports.generators;

import <%= packageName %>.dto.reports.ReportDTO;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.io.ByteArrayOutputStream;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

/**
 * Utilitaire pour générer des rapports au format PDF.
 */
@Component
public class PdfReportGenerator {

    private final Logger log = LoggerFactory.getLogger(PdfReportGenerator.class);
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    private static final Font TITLE_FONT = new Font(Font.FontFamily.HELVETICA, 16, Font.BOLD);
    private static final Font HEADER_FONT = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
    private static final Font NORMAL_FONT = new Font(Font.FontFamily.HELVETICA, 10, Font.NORMAL);
    private static final Font SMALL_FONT = new Font(Font.FontFamily.HELVETICA, 8, Font.NORMAL);
    private static final Font TOTAL_FONT = new Font(Font.FontFamily.HELVETICA, 10, Font.BOLD);

    /**
     * Génère un rapport PDF à partir des données fournies.
     *
     * @param reportDTO le DTO contenant les données du rapport
     * @return les données binaires du fichier PDF
     */
    public byte[] generateReport(ReportDTO reportDTO) {
        log.debug("Génération d'un rapport PDF pour : {}", reportDTO.getName());

        try {
            Document document = new Document(PageSize.A4);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            PdfWriter writer = PdfWriter.getInstance(document, baos);

            // Ajout d'un en-tête et pied de page
            writer.setPageEvent(new ReportPageEvent(reportDTO));

            document.open();

            // Titre du rapport
            addReportHeader(document, reportDTO);

            // Contenu du rapport (à adapter selon le type de rapport)
            addReportContent(document, reportDTO);

            document.close();

            return baos.toByteArray();
        } catch (Exception e) {
            log.error("Erreur lors de la génération du rapport PDF", e);
            throw new RuntimeException("Erreur lors de la génération du rapport PDF", e);
        }
    }

    /**
     * Génère un rapport PDF générique à partir des données fournies.
     *
     * @param title le titre du rapport
     * @param headers les en-têtes des colonnes
     * @param data les données du rapport (liste de maps)
     * @return les données binaires du fichier PDF
     */
    public byte[] generateGenericReport(String title, List<String> headers, List<Map<String, Object>> data) {
        log.debug("Génération d'un rapport PDF générique : {}", title);

        try {
            Document document = new Document(PageSize.A4);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            PdfWriter writer = PdfWriter.getInstance(document, baos);

            // Ajout d'un pied de page simple
            writer.setPageEvent(new SimplePageEvent());

            document.open();

            // Titre
            Paragraph titlePara = new Paragraph(title, TITLE_FONT);
            titlePara.setAlignment(Element.ALIGN_CENTER);
            titlePara.setSpacingAfter(20);
            document.add(titlePara);

            // Tableau de données
            PdfPTable table = new PdfPTable(headers.size());
            table.setWidthPercentage(100);

            // En-têtes
            for (String header : headers) {
                PdfPCell cell = new PdfPCell(new Phrase(header, HEADER_FONT));
                cell.setBackgroundColor(BaseColor.LIGHT_GRAY);
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                cell.setPadding(5);
                table.addCell(cell);
            }

            // Données
            for (Map<String, Object> rowData : data) {
                for (String header : headers) {
                    Object value = rowData.get(header);
                    String cellValue = value == null ? "" : value.toString();
                    PdfPCell cell = new PdfPCell(new Phrase(cellValue, NORMAL_FONT));
                    cell.setPadding(5);
                    table.addCell(cell);
                }
            }

            document.add(table);
            document.close();

            return baos.toByteArray();
        } catch (Exception e) {
            log.error("Erreur lors de la génération du rapport PDF générique", e);
            throw new RuntimeException("Erreur lors de la génération du rapport PDF générique", e);
        }
    }

    // Méthodes privées pour la création des éléments du document PDF

    private void addReportHeader(Document document, ReportDTO reportDTO) throws DocumentException {
        // Titre du rapport
        Paragraph title = new Paragraph(reportDTO.getName(), TITLE_FONT);
        title.setAlignment(Element.ALIGN_CENTER);
        title.setSpacingAfter(10);
        document.add(title);

        // Description
        if (reportDTO.getDescription() != null && !reportDTO.getDescription().isEmpty()) {
            Paragraph desc = new Paragraph(reportDTO.getDescription(), NORMAL_FONT);
            desc.setAlignment(Element.ALIGN_CENTER);
            desc.setSpacingAfter(10);
            document.add(desc);
        }

        // Période du rapport
        String period = "Période: " + reportDTO.getStartDate().format(DATE_FORMATTER) +
                        " - " + reportDTO.getEndDate().format(DATE_FORMATTER);
        Paragraph periodPara = new Paragraph(period, NORMAL_FONT);
        periodPara.setAlignment(Element.ALIGN_CENTER);
        periodPara.setSpacingAfter(20);
        document.add(periodPara);
    }

    private void addReportContent(Document document, ReportDTO reportDTO) throws DocumentException {
        // Création d'un tableau pour les données
        PdfPTable table = new PdfPTable(4); // Nombre de colonnes à adapter selon le rapport
        table.setWidthPercentage(100);
        try {
            table.setWidths(new float[]{2, 4, 2, 2});
        } catch (DocumentException e) {
            log.warn("Impossible de définir les largeurs des colonnes", e);
        }

        // En-têtes du tableau
        String[] headers = {"Date", "Description", "Montant", "Status"};
        for (String header : headers) {
            PdfPCell cell = new PdfPCell(new Phrase(header, HEADER_FONT));
            cell.setBackgroundColor(BaseColor.LIGHT_GRAY);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setPadding(5);
            table.addCell(cell);
        }

        // Données (exemple factice à remplacer par les vraies données du rapport)
        String[][] data = {
                {"01/01/2025", "Paiement client A", "1250,00 €", "COMPLÉTÉ"},
                {"05/01/2025", "Paiement client B", "780,50 €", "COMPLÉTÉ"},
                {"10/01/2025", "Paiement client C", "2300,75 €", "COMPLÉTÉ"},
                {"15/01/2025", "Paiement client D", "550,00 €", "ANNULÉ"},
                {"20/01/2025", "Paiement client E", "1800,25 €", "COMPLÉTÉ"}
        };

        for (String[] row : data) {
            for (int i = 0; i < row.length; i++) {
                PdfPCell cell = new PdfPCell(new Phrase(row[i], NORMAL_FONT));

                // Alignement spécifique pour certaines colonnes
                if (i == 2) {  // Colonne des montants
                    cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                } else if (i == 3) {  // Colonne des statuts
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                }

                table.addCell(cell);
            }
        }

        // Ligne de total
        PdfPCell emptyCell = new PdfPCell(new Phrase(""));
        emptyCell.setBorder(Rectangle.NO_BORDER);
        table.addCell(emptyCell);

        PdfPCell totalLabelCell = new PdfPCell(new Phrase("Total:", TOTAL_FONT));
        totalLabelCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        totalLabelCell.setBorder(Rectangle.NO_BORDER);
        table.addCell(totalLabelCell);

        PdfPCell totalValueCell = new PdfPCell(new Phrase("6131,50 €", TOTAL_FONT));
        totalValueCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        table.addCell(totalValueCell);

        table.addCell(emptyCell);

        document.add(table);

        // Espace
        document.add(Chunk.NEWLINE);

        // Notes ou autres informations
        Paragraph notes = new Paragraph("Note: Ce rapport est généré automatiquement.", SMALL_FONT);
        notes.setSpacingBefore(10);
        document.add(notes);
    }

    // Classes internes pour la gestion des en-têtes et pieds de page

    /**
     * Classe pour ajouter des en-têtes et pieds de page aux rapports PDF.
     */
    private static class ReportPageEvent extends PdfPageEventHelper {
        private final ReportDTO reportDTO;

        public ReportPageEvent(ReportDTO reportDTO) {
            this.reportDTO = reportDTO;
        }

        @Override
        public void onEndPage(PdfWriter writer, Document document) {
            PdfContentByte cb = writer.getDirectContent();

            // En-tête
            ColumnText.showTextAligned(cb, Element.ALIGN_LEFT,
                    new Phrase(reportDTO.getName(), SMALL_FONT),
                    document.leftMargin(), document.top() + 10, 0);

            // Pied de page - numéro de page
            ColumnText.showTextAligned(cb, Element.ALIGN_CENTER,
                    new Phrase(String.format("Page %d", writer.getPageNumber()), SMALL_FONT),
                    (document.right() - document.left()) / 2 + document.leftMargin(),
                    document.bottom() - 10, 0);

            // Date de génération
            ColumnText.showTextAligned(cb, Element.ALIGN_RIGHT,
                    new Phrase("Généré le " + reportDTO.getGeneratedDate().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")), SMALL_FONT),
                    document.right(), document.bottom() - 10, 0);
        }
    }

    /**
     * Classe simplifiée pour les pieds de page des rapports génériques.
     */
    private static class SimplePageEvent extends PdfPageEventHelper {
        @Override
        public void onEndPage(PdfWriter writer, Document document) {
            PdfContentByte cb = writer.getDirectContent();

            // Pied de page - numéro de page
            ColumnText.showTextAligned(cb, Element.ALIGN_CENTER,
                    new Phrase(String.format("Page %d", writer.getPageNumber()), SMALL_FONT),
                    (document.right() - document.left()) / 2 + document.leftMargin(),
                    document.bottom() - 10, 0);
        }
    }
}
