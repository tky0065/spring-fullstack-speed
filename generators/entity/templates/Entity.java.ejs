package <%= packageName %>;

<% if (imports && imports.length > 0) { -%>
<% imports.forEach(function(importStatement) { -%>
import <%= importStatement %>;
<% }); -%>
<% } -%>
import jakarta.persistence.*;
import jakarta.validation.constraints.*;
<% if (dateTimeImport) { -%>
import java.time.*;
<% } -%>
<% if (bigDecimalImport) { -%>
import java.math.BigDecimal;
<% } -%>
<% if (auditable) { -%>
import org.springframework.data.annotation.CreatedBy;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedBy;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;
<% } -%>
import java.io.Serializable;
import lombok.Getter;
import lombok.Setter;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.ToString;
import lombok.EqualsAndHashCode;

/**
 * <%= entityName %> Entity
 */
@Entity
@Table(name = "<%= entityName.toLowerCase() %>s")
<% if (auditable) { -%>
@EntityListeners(AuditingEntityListener.class)
<% } -%>
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString(exclude = { <% if (fields.length > 0) { %>"<%= fields.map(f => f.name).join('", "') %>"<% } %> })
@EqualsAndHashCode(of = "id")
public class <%= entityName %> implements Serializable {

    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

<% fields.forEach(function(field) { -%>
    <% if (field.unique) { -%>
    @Column(name = "<%= field.name %>", nullable = <%= !field.required %>, unique = true)
    <% } else { -%>
    @Column(name = "<%= field.name %>", nullable = <%= !field.required %>)
    <% } -%>
    <% if (field.required) { -%>
    @NotNull
    <% } -%>
    <% if (field.type === "String") { -%>
    <% if (field.minLength != null) { -%>
    @Size(min = <%= field.minLength %><% if (field.maxLength != null) { %>, max = <%= field.maxLength %><% } %>)
    <% } else if (field.maxLength != null) { -%>
    @Size(max = <%= field.maxLength %>)
    <% } -%>
    <% } -%>
    <% if (["Integer", "Long", "Float", "Double", "BigDecimal"].includes(field.type)) { -%>
    <% if (field.min != null) { -%>
    @Min(value = <%= field.min %>)
    <% } -%>
    <% if (field.max != null) { -%>
    @Max(value = <%= field.max %>)
    <% } -%>
    <% } -%>
    private <%= field.type %> <%= field.name %>;
<% }); -%>

<% if (auditable) { -%>
    @CreatedBy
    @Column(name = "created_by", nullable = false, length = 50, updatable = false)
    private String createdBy;

    @CreatedDate
    @Column(name = "created_date", updatable = false)
    private Instant createdDate = Instant.now();

    @LastModifiedBy
    @Column(name = "last_modified_by", length = 50)
    private String lastModifiedBy;

    @LastModifiedDate
    @Column(name = "last_modified_date")
    private Instant lastModifiedDate = Instant.now();
<% } -%>

}
