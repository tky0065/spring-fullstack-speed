package <%= packageName %>;

<% if (imports && imports.length > 0) { -%>
<% imports.forEach(function(importStatement) { -%>
import <%= importStatement %>;
<% }); -%>
<% } -%>
<% if (dateTimeImport) { -%>
import java.time.*;
<% } -%>
<% if (bigDecimalImport) { -%>
import java.math.BigDecimal;
<% } -%>
import jakarta.validation.constraints.*;
import java.io.Serializable;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.Builder;

/**
 * DTO pour l'entit√© <%= entityName %>.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class <%= entityName %>DTO implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long id;

<% fields.forEach(function(field) { -%>
    <% if (field.required) { -%>
    @NotNull
    <% } -%>
    <% if (field.type === "String") { -%>
    <% if (field.minLength != null) { -%>
    @Size(min = <%= field.minLength %><% if (field.maxLength != null) { %>, max = <%= field.maxLength %><% } %>)
    <% } else if (field.maxLength != null) { -%>
    @Size(max = <%= field.maxLength %>)
    <% } -%>
    <% } -%>
    <% if (["Integer", "Long", "Float", "Double", "BigDecimal"].includes(field.type)) { -%>
    <% if (field.min != null) { -%>
    @Min(value = <%= field.min %>)
    <% } -%>
    <% if (field.max != null) { -%>
    @Max(value = <%= field.max %>)
    <% } -%>
    <% } -%>
    private <%= field.type %> <%= field.name %>;
<% }); -%>

<% if (auditable) { -%>
    private String createdBy;
    private Instant createdDate;
    private String lastModifiedBy;
    private Instant lastModifiedDate;
<% } -%>

}
