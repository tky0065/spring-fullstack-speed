package <%= packageName %>.config;

import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.containers.MySQLContainer;
import org.testcontainers.containers.MongoDBContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.junit.jupiter.api.BeforeAll;

@Testcontainers
public abstract class AbstractContainerBaseTest {

    // Choose the appropriate container based on the database type
    <% if (databaseType === 'postgresql') { %>
    static final PostgreSQLContainer<?> database = new PostgreSQLContainer<>("postgres:14")
            .withDatabaseName("testdb")
            .withUsername("test")
            .withPassword("test");
    <% } else if (databaseType === 'mysql') { %>
    static final MySQLContainer<?> database = new MySQLContainer<>("mysql:8")
            .withDatabaseName("testdb")
            .withUsername("test")
            .withPassword("test");
    <% } else if (databaseType === 'mongodb') { %>
    static final MongoDBContainer database = new MongoDBContainer("mongo:5.0");
    <% } %>

    @BeforeAll
    static void startContainer() {
        database.start();
    }

    @DynamicPropertySource
    static void databaseProperties(DynamicPropertyRegistry registry) {
        <% if (databaseType === 'postgresql') { %>
        registry.add("spring.datasource.url", database::getJdbcUrl);
        registry.add("spring.datasource.username", database::getUsername);
        registry.add("spring.datasource.password", database::getPassword);
        <% } else if (databaseType === 'mysql') { %>
        registry.add("spring.datasource.url", database::getJdbcUrl);
        registry.add("spring.datasource.username", database::getUsername);
        registry.add("spring.datasource.password", database::getPassword);
        <% } else if (databaseType === 'mongodb') { %>
        registry.add("spring.data.mongodb.uri", database::getReplicaSetUrl);
        <% } %>
    }
}
