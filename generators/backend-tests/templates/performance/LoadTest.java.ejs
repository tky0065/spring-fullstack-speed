package <%= packageName %>.performance;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
@Tag("performance")
public class LoadTest {

    @Autowired
    private MockMvc mockMvc;

    private static final int CONCURRENT_USERS = 50;
    private static final int REQUESTS_PER_USER = 10;
    private static final long TEST_TIMEOUT_SECONDS = 60;

    @Test
    @WithMockUser(roles = "USER")
    void testEndpointUnderLoad() throws Exception {
        // Simulate multiple users accessing the endpoint concurrently
        ExecutorService executor = Executors.newFixedThreadPool(CONCURRENT_USERS);
        List<CompletableFuture<Void>> futures = new ArrayList<>();
        AtomicInteger successfulRequests = new AtomicInteger(0);
        AtomicInteger failedRequests = new AtomicInteger(0);
        AtomicInteger totalResponseTime = new AtomicInteger(0);

        // Create concurrent tasks
        for (int i = 0; i < CONCURRENT_USERS; i++) {
            CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {
                for (int j = 0; j < REQUESTS_PER_USER; j++) {
                    try {
                        long startTime = System.currentTimeMillis();
                        mockMvc.perform(get("/api/users"))
                               .andExpect(status().isOk());
                        long endTime = System.currentTimeMillis();
                        totalResponseTime.addAndGet((int) (endTime - startTime));
                        successfulRequests.incrementAndGet();
                    } catch (Exception e) {
                        failedRequests.incrementAndGet();
                        System.err.println("Request failed: " + e.getMessage());
                    }
                }
            }, executor);
            futures.add(future);
        }

        // Wait for all tasks to complete
        CompletableFuture<Void> allFutures = CompletableFuture.allOf(
            futures.toArray(new CompletableFuture[0])
        );

        try {
            allFutures.get(TEST_TIMEOUT_SECONDS, TimeUnit.SECONDS);
        } catch (Exception e) {
            System.err.println("Load test timed out or failed: " + e.getMessage());
        } finally {
            executor.shutdown();
        }

        // Calculate statistics
        int totalRequests = CONCURRENT_USERS * REQUESTS_PER_USER;
        double successRate = (double) successfulRequests.get() / totalRequests * 100;
        double avgResponseTime = (double) totalResponseTime.get() / successfulRequests.get();

        System.out.println("Load Test Results:");
        System.out.println("- Concurrent users: " + CONCURRENT_USERS);
        System.out.println("- Requests per user: " + REQUESTS_PER_USER);
        System.out.println("- Total requests: " + totalRequests);
        System.out.println("- Successful requests: " + successfulRequests.get());
        System.out.println("- Failed requests: " + failedRequests.get());
        System.out.println("- Success rate: " + String.format("%.2f%%", successRate));
        System.out.println("- Average response time: " + String.format("%.2f ms", avgResponseTime));

        // Assertions
        assertTrue(successRate > 95, "Success rate should be at least 95%, but was " + String.format("%.2f%%", successRate));
        assertTrue(avgResponseTime < 1000, "Average response time should be less than 1000ms, but was " + String.format("%.2f ms", avgResponseTime));
    }
}
