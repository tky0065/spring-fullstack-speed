#!/bin/bash
# Script pour gérer les secrets Docker

set -e

# Couleurs pour les messages
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Action par défaut
ACTION=${1:-help}

# Fonction d'aide
function show_help {
    echo -e "${YELLOW}Gestion des secrets Docker${NC}"
    echo "Usage: $0 [action]"
    echo ""
    echo "Actions disponibles:"
    echo "  create   - Créer un fichier .env à partir du modèle"
    echo "  encrypt  - Chiffrer le fichier .env"
    echo "  decrypt  - Déchiffrer le fichier .env.enc"
    echo "  clean    - Supprimer le fichier .env"
    echo "  help     - Afficher cette aide"
    echo ""
}

# Fonction pour créer un fichier .env
function create_env {
    if [ -f ".env" ]; then
        echo -e "${RED}Le fichier .env existe déjà.${NC}"
        read -p "Voulez-vous le remplacer? (y/n) " -n 1 -r
        echo ""
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo -e "${YELLOW}Opération annulée.${NC}"
            exit 1
        fi
    fi

    if [ -f "secrets-example.env" ]; then
        cp secrets-example.env .env
        echo -e "${GREEN}Fichier .env créé à partir du modèle.${NC}"
        echo -e "${YELLOW}N'oubliez pas de modifier les valeurs dans le fichier .env!${NC}"
    else
        echo -e "${RED}Le fichier secrets-example.env n'existe pas.${NC}"
        exit 1
    fi
}

# Fonction pour chiffrer le fichier .env
function encrypt_env {
    if [ ! -f ".env" ]; then
        echo -e "${RED}Le fichier .env n'existe pas.${NC}"
        echo -e "${YELLOW}Exécutez '$0 create' pour créer un fichier .env.${NC}"
        exit 1
    fi

    read -sp "Entrez un mot de passe pour le chiffrement: " PASSWORD
    echo ""
    read -sp "Confirmez le mot de passe: " PASSWORD_CONFIRM
    echo ""

    if [ "$PASSWORD" != "$PASSWORD_CONFIRM" ]; then
        echo -e "${RED}Les mots de passe ne correspondent pas.${NC}"
        exit 1
    fi

    # Chiffrement avec gpg
    gpg --batch --yes --passphrase "$PASSWORD" -c .env
    mv .env.gpg .env.enc

    echo -e "${GREEN}Fichier .env chiffré avec succès dans .env.enc${NC}"
    echo -e "${YELLOW}Vous pouvez maintenant ajouter .env.enc à votre dépôt git.${NC}"
    echo -e "${YELLOW}N'oubliez pas d'ajouter .env dans votre .gitignore!${NC}"
}

# Fonction pour déchiffrer le fichier .env.enc
function decrypt_env {
    if [ ! -f ".env.enc" ]; then
        echo -e "${RED}Le fichier .env.enc n'existe pas.${NC}"
        exit 1
    fi

    read -sp "Entrez le mot de passe pour le déchiffrement: " PASSWORD
    echo ""

    # Déchiffrement avec gpg
    gpg --batch --yes --passphrase "$PASSWORD" --output .env -d .env.enc

    if [ $? -eq 0 ]; then
        echo -e "${GREEN}Fichier .env déchiffré avec succès.${NC}"
    else
        echo -e "${RED}Échec du déchiffrement. Mot de passe incorrect?${NC}"
        exit 1
    fi
}

# Fonction pour nettoyer les fichiers
function clean_env {
    if [ -f ".env" ]; then
        read -p "Êtes-vous sûr de vouloir supprimer le fichier .env? (y/n) " -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            rm .env
            echo -e "${GREEN}Fichier .env supprimé.${NC}"
        else
            echo -e "${YELLOW}Suppression annulée.${NC}"
        fi
    else
        echo -e "${YELLOW}Le fichier .env n'existe pas.${NC}"
    fi
}

# Exécution de l'action demandée
case $ACTION in
    create)
        create_env
        ;;
    encrypt)
        encrypt_env
        ;;
    decrypt)
        decrypt_env
        ;;
    clean)
        clean_env
        ;;
    help|*)
        show_help
        ;;
esac
