#!/usr/bin/env node

/**
 * Script de d√©bogage qui imprime la stack trace au moment de l'appel √† ensureDirectoryExists
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// √âquivalent √† __dirname en ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const originalFile = path.join(__dirname, 'dist/generators/entity/index.js');
const backupFile = path.join(__dirname, 'dist/generators/entity/index.js.bak');

// Faire une sauvegarde du fichier original
if (!fs.existsSync(backupFile)) {
  fs.copyFileSync(originalFile, backupFile);
  console.log(`üìã Sauvegarde cr√©√©e: ${backupFile}`);
}

// Lire le contenu du fichier
let content = fs.readFileSync(originalFile, 'utf8');

// Modifier la m√©thode ensureDirectoryExists pour ajouter un stack trace
const modifiedMethod = `
    /**
     * Assure que le r√©pertoire existe
     */
    ensureDirectoryExists(dirPath) {
        console.log('====== DEBUG TRACE ======');
        console.log(\`Appel √† ensureDirectoryExists avec dirPath = '\${dirPath}'\`);
        console.error(new Error().stack);
        console.log('========================');

        this.log(INFO_COLOR(\`[DEBUG ensureDirectoryExists] dirPath: '\${dirPath}'\`));
        
        if (!dirPath || dirPath === 'undefined') {
            this.log(ERROR_COLOR(\`[BUG] Chemin de dossier invalide pass√© √† ensureDirectoryExists: '\${dirPath}'\`));
            // Afficher la stack trace pour voir d'o√π vient l'appel
            console.error('Stack trace de l\\'appel probl√©matique:');
            console.error(new Error().stack);
            
            // Correction d'urgence - utiliser un r√©pertoire par d√©faut
            const emergencyDir = "src/main/java/com/example/fullstack/entity";
            this.log(INFO_COLOR(\`[CORRECTION D'URGENCE] Utilisation du r√©pertoire par d√©faut: '\${emergencyDir}'\`));
            
            if (!fs.existsSync(emergencyDir)) {
                fs.mkdirSync(emergencyDir, { recursive: true });
                this.log(chalk.yellow(\`üìÅ Cr√©ation du r√©pertoire par d√©faut: \${emergencyDir}\`));
                return emergencyDir;
            }
            return emergencyDir;
        }

        const cleanPath = dirPath.trim();
        if (!fs.existsSync(cleanPath)) {
            fs.mkdirSync(cleanPath, { recursive: true });
            this.log(chalk.yellow(\`üìÅ Cr√©ation du r√©pertoire: \${cleanPath}\`));
        }
        else {
            this.log(INFO_COLOR(\`üìÅ R√©pertoire existe: \${cleanPath}\`));
        }
        return cleanPath;
    }`;

// Remplacer la m√©thode ensureDirectoryExists par notre version modifi√©e
content = content.replace(/\/\*\*\s+\* Assure que le r√©pertoire existe[\s\S]+?this\.log\(INFO_COLOR\(`üìÅ R√©pertoire existe: \${cleanPath}`\)\);\s+}\s+}/m, modifiedMethod);

// √âcrire le contenu modifi√© dans le fichier
fs.writeFileSync(originalFile, content);
console.log(`‚úÖ M√©thode ensureDirectoryExists mise √† jour dans ${originalFile}`);
console.log('Ex√©cutez maintenant votre commande "sfs e" pour d√©boguer le probl√®me');
