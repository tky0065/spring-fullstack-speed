#!/usr/bin/env node

/**
 * Script pour tester la g√©n√©ration d'un projet Spring Boot minimal
 * Ce script ex√©cute le g√©n√©rateur avec une configuration minimale et v√©rifie le r√©sultat
 */

const path = require('path');
const spawn = require('cross-spawn');
const fs = require('fs-extra');
const chalk = require('chalk');

// Chemin vers le dossier temporaire de test
const TEST_DIR = path.join(process.cwd(), 'test-output');

console.log(chalk.blue('üß™ D√©marrage du test de g√©n√©ration minimale...'));

// Supprimer le dossier de test s'il existe d√©j√†
if (fs.existsSync(TEST_DIR)) {
    console.log(chalk.yellow('üóëÔ∏è  Nettoyage du dossier de test pr√©c√©dent...'));
    fs.removeSync(TEST_DIR);
}

// Cr√©er le dossier de test
fs.mkdirSync(TEST_DIR);
process.chdir(TEST_DIR);

console.log(chalk.blue('üöÄ Ex√©cution du g√©n√©rateur avec configuration minimale...'));

// Options pour la g√©n√©ration minimale
const options = [
    'yo',
    'spring-fullstack',
    '--appName=test-app',
    '--packageName=com.example.testapp',
    '--database=H2',
    '--frontendFramework=Aucun (API seulement)',
    '--includeAuth=false',
    '--skip-install'
];

// Ex√©cute le g√©n√©rateur
const result = spawn.sync('npx', options, { stdio: 'inherit' });

if (result.status !== 0) {
    console.error(chalk.red('‚ùå La g√©n√©ration a √©chou√© !'));
    process.exit(1);
}

console.log(chalk.green('‚úÖ La g√©n√©ration s\'est termin√©e avec succ√®s !'));

// V√©rifier la pr√©sence des fichiers essentiels
const essentialFiles = [
    'pom.xml',
    'mvnw',
    'src/main/resources/application.yml',
    'src/main/resources/logback-spring.xml',
    'src/main/java/com/example/testapp/TestAppApplication.java',
    'src/main/java/com/example/testapp/entity/BaseEntity.java',
    'src/main/java/com/example/testapp/entity/Example.java',
    'src/main/java/com/example/testapp/repository/ExampleRepository.java',
    'src/main/java/com/example/testapp/service/ExampleService.java',
    'src/main/java/com/example/testapp/controller/ExampleController.java',
    'src/main/java/com/example/testapp/util/LoggingUtils.java',
    'src/main/java/com/example/testapp/util/StringUtils.java',
    'src/main/java/com/example/testapp/util/DateTimeUtils.java',
    'src/main/java/com/example/testapp/util/PaginationUtil.java'
];

console.log(chalk.blue('üîç V√©rification des fichiers essentiels...'));
let allFilesPresent = true;

essentialFiles.forEach(file => {
    const filePath = path.join(TEST_DIR, file);
    if (fs.existsSync(filePath)) {
        console.log(chalk.green(`‚úÖ ${file} - OK`));
    } else {
        console.log(chalk.red(`‚ùå ${file} - MANQUANT`));
        allFilesPresent = false;
    }
});

if (allFilesPresent) {
    console.log(chalk.green('‚úÖ Tous les fichiers essentiels sont pr√©sents !'));
    console.log(chalk.green('‚úÖ Test de g√©n√©ration minimale r√©ussi !'));
} else {
    console.error(chalk.red('‚ùå Certains fichiers sont manquants. Le test a √©chou√©.'));
    process.exit(1);
}

// Afficher l'emplacement du projet g√©n√©r√©
console.log(chalk.blue(`üìÇ Le projet de test a √©t√© g√©n√©r√© dans : ${TEST_DIR}`));
console.log(chalk.blue('üí° Vous pouvez explorer le projet g√©n√©r√© pour v√©rifier son contenu.'));
