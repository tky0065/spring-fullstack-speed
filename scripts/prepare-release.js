#!/usr/bin/env node

/**
 * Script de pr√©paration de la publication
 * Ce script pr√©pare le package pour la publication sur npm
 */

import fs from 'fs-extra';
import path from 'path';
import chalk from 'chalk';
import { execSync } from 'child_process';
import { fileURLToPath } from 'url';

// Obtenir le chemin du r√©pertoire courant en mode ES Module
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log(chalk.blue('üöÄ Pr√©paration de la publication de Spring-Fullstack-Speed v1.0.0...'));

// Dossier de destination pour la publication
const DIST_DIR = path.join(process.cwd(), 'dist');

// Fonction pour ex√©cuter une commande avec log
function runCommand(command) {
    console.log(chalk.cyan(`> ${command}`));
    try {
        execSync(command, { stdio: 'inherit' });
        return true;
    } catch (error) {
        console.error(chalk.red(`‚ùå Erreur lors de l'ex√©cution de la commande: ${command}`));
        console.error(chalk.red(error.message));
        return false;
    }
}

// Fonction principale
async function prepareRelease() {
    console.log(chalk.blue('\nüìã V√©rification des pr√©requis...'));

    // V√©rifier que npm et node sont install√©s avec les versions correctes
    try {
        const nodeVersion = execSync('node --version').toString().trim();
        console.log(chalk.green(`‚úÖ Node.js install√©: ${nodeVersion}`));

        const npmVersion = execSync('npm --version').toString().trim();
        console.log(chalk.green(`‚úÖ npm install√©: ${npmVersion}`));
    } catch (error) {
        console.error(chalk.red('‚ùå Impossible de v√©rifier les versions de Node.js ou npm'));
        process.exit(1);
    }

    console.log(chalk.blue('\nüßπ Nettoyage des fichiers temporaires...'));

    // Supprimer le dossier dist s'il existe
    if (fs.existsSync(DIST_DIR)) {
        fs.removeSync(DIST_DIR);
        console.log(chalk.green('‚úÖ Dossier "dist" nettoy√©'));
    }

    // Nettoyer node_modules
    if (runCommand('npm run clean')) {
        console.log(chalk.green('‚úÖ Nettoyage effectu√©'));
    } else {
        console.error(chalk.red('‚ùå Erreur lors du nettoyage'));
        process.exit(1);
    }

    console.log(chalk.blue('\nüîç V√©rification des d√©pendances...'));

    // V√©rifier si des d√©pendances sont obsol√®tes
    try {
        const outdated = execSync('npm outdated --json').toString();
        const outdatedDeps = JSON.parse(outdated || '{}');

        if (Object.keys(outdatedDeps).length > 0) {
            console.log(chalk.yellow('‚ö†Ô∏è  D√©pendances obsol√®tes d√©tect√©es:'));
            for (const [dep, info] of Object.entries(outdatedDeps)) {
                console.log(chalk.yellow(`   ${dep}: ${info.current} ‚Üí ${info.latest}`));
            }
            console.log(chalk.yellow('   Consid√©rez mettre √† jour ces d√©pendances avant la publication'));
        } else {
            console.log(chalk.green('‚úÖ Toutes les d√©pendances sont √† jour'));
        }
    } catch (error) {
        console.log(chalk.green('‚úÖ Aucune d√©pendance obsol√®te d√©tect√©e'));
    }

    console.log(chalk.blue('\nüß™ Ex√©cution des tests...'));

    // Ex√©cuter les tests unitaires
    if (runCommand('npm test')) {
        console.log(chalk.green('‚úÖ Tests unitaires r√©ussis'));
    } else {
        console.error(chalk.red('‚ùå Certains tests unitaires ont √©chou√©'));
        process.exit(1);
    }

    console.log(chalk.blue('\nüì¶ Construction du package...'));

    // Construire le projet
    if (runCommand('npm run build')) {
        console.log(chalk.green('‚úÖ Build r√©ussi'));
    } else {
        console.error(chalk.red('‚ùå Erreur lors du build'));
        process.exit(1);
    }

    console.log(chalk.blue('\nüìù V√©rification des fichiers de la publication...'));

    // V√©rifier que le dossier dist existe
    if (!fs.existsSync(DIST_DIR)) {
        console.error(chalk.red('‚ùå Le dossier "dist" n\'a pas √©t√© cr√©√©'));
        process.exit(1);
    }

    // V√©rifier que les fichiers essentiels sont pr√©sents
    const requiredFiles = [
        'package.json',
        'README.md',
        'CHANGELOG.md',
        'LICENSE'
    ];

    const missingFiles = requiredFiles.filter(file => !fs.existsSync(path.join(process.cwd(), file)));

    if (missingFiles.length > 0) {
        console.error(chalk.red(`‚ùå Fichiers requis manquants: ${missingFiles.join(', ')}`));
        process.exit(1);
    } else {
        console.log(chalk.green('‚úÖ Tous les fichiers requis sont pr√©sents'));
    }

    console.log(chalk.blue('\nüß™ Cr√©ation d\'un package de test...'));

    // Cr√©er un package npm sans le publier
    if (runCommand('npm pack --dry-run')) {
        console.log(chalk.green('‚úÖ Package cr√©√© avec succ√®s (simulation)'));
    } else {
        console.error(chalk.red('‚ùå Erreur lors de la cr√©ation du package'));
        process.exit(1);
    }

    console.log(chalk.blue('\n‚úÖ V√©rification finale...'));

    console.log(chalk.green('\nüéâ Le package est pr√™t √† √™tre publi√©!'));
    console.log(chalk.green('\nPour publier, ex√©cutez les commandes suivantes:'));
    console.log(chalk.cyan('\n  npm login'));
    console.log(chalk.cyan('  npm publish --access=public'));

    console.log(chalk.yellow('\nN\'oubliez pas de cr√©er un tag git pour la version:'));
    console.log(chalk.cyan('\n  git tag v1.0.0'));
    console.log(chalk.cyan('  git push origin v1.0.0'));

    console.log(chalk.blue('\nüìù Apr√®s la publication, n\'oubliez pas de cr√©er une release sur GitHub avec les notes de la version 1.0.0.'));
}

// Ex√©cuter le script
prepareRelease().catch(error => {
    console.error(chalk.red('‚ùå Erreur fatale lors de la pr√©paration de la publication:'), error);
    process.exit(1);
});
