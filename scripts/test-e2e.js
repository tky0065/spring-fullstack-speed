#!/usr/bin/env node

/**
 * Script de tests end-to-end pour Spring-Fullstack-Speed
 * Ce script simule des cas d'utilisation r√©els de l'outil
 */

const path = require('path');
const spawn = require('cross-spawn');
const fs = require('fs-extra');
const chalk = require('chalk');
const { execSync } = require('child_process');

// Chemin vers le dossier temporaire de test
const TEST_DIR = path.join(process.cwd(), 'test-e2e-output');

console.log(chalk.blue('üß™ D√©marrage des tests end-to-end...'));

// Supprimer le dossier de test s'il existe d√©j√†
if (fs.existsSync(TEST_DIR)) {
    console.log(chalk.yellow('üóëÔ∏è  Nettoyage du dossier de test pr√©c√©dent...'));
    fs.removeSync(TEST_DIR);
}

// Cr√©er le dossier de test
fs.mkdirSync(TEST_DIR);

// D√©finition des cas d'utilisation √† tester
const useCases = [
    {
        name: 'e2e-react-mysql',
        description: 'Application React avec MySQL, entit√© User et authentification JWT',
        steps: [
            // G√©n√©ration de l'application
            {
                type: 'command',
                label: 'G√©n√©ration application',
                command: 'node',
                args: [
                    path.join(process.cwd(), 'cli.js'),
                    'app',
                    '--name=ReactMySQLApp',
                    '--package=com.example.reactmysql',
                    '--db=mysql',
                    '--build=maven',
                    '--frontend=react'
                ]
            },
            // G√©n√©ration des entit√©s
            {
                type: 'command',
                label: 'G√©n√©ration entit√© User',
                command: 'node',
                args: [
                    path.join(process.cwd(), 'cli.js'),
                    'entity',
                    '--name=User',
                    '--fields=username:string,email:string,firstName:string,lastName:string,active:boolean'
                ]
            },
            // G√©n√©ration des DTOs
            {
                type: 'command',
                label: 'G√©n√©ration DTOs',
                command: 'node',
                args: [
                    path.join(process.cwd(), 'cli.js'),
                    'dtos',
                    '--entity=User'
                ]
            },
            // G√©n√©ration des op√©rations CRUD
            {
                type: 'command',
                label: 'G√©n√©ration CRUD',
                command: 'node',
                args: [
                    path.join(process.cwd(), 'cli.js'),
                    'crud',
                    '--entity=User'
                ]
            },
            // V√©rification des fichiers et structure
            {
                type: 'verify',
                label: 'V√©rification des fichiers g√©n√©r√©s',
                files: [
                    'pom.xml',
                    'src/main/java/com/example/reactmysql/entity/User.java',
                    'src/main/java/com/example/reactmysql/dto/UserDTO.java',
                    'src/main/java/com/example/reactmysql/controller/UserController.java',
                    'src/main/resources/application.properties'
                ]
            },
            // Compilation du projet Java
            {
                type: 'build',
                label: 'Compilation du projet Java',
                command: process.platform === 'win32' ? 'mvnw.cmd' : './mvnw',
                args: ['clean', 'compile'],
                successMessage: 'BUILD SUCCESS'
            },
            // Test d'ex√©cution
            {
                type: 'build',
                label: 'Test de l\'ex√©cution du projet (compilation uniquement)',
                command: process.platform === 'win32' ? 'mvnw.cmd' : './mvnw',
                args: ['package', '-DskipTests'],
                successMessage: 'BUILD SUCCESS'
            }
        ]
    },
    {
        name: 'e2e-angular-postgresql',
        description: 'Application Angular avec PostgreSQL et recherche full-text',
        steps: [
            // G√©n√©ration de l'application
            {
                type: 'command',
                label: 'G√©n√©ration application',
                command: 'node',
                args: [
                    path.join(process.cwd(), 'cli.js'),
                    'app',
                    '--name=AngularPostgresApp',
                    '--package=com.example.angularpostgres',
                    '--db=postgresql',
                    '--build=gradle',
                    '--frontend=angular'
                ]
            },
            // G√©n√©ration des entit√©s
            {
                type: 'command',
                label: 'G√©n√©ration entit√© Product',
                command: 'node',
                args: [
                    path.join(process.cwd(), 'cli.js'),
                    'entity',
                    '--name=Product',
                    '--fields=name:string,description:string,price:number,category:string,tags:string'
                ]
            },
            // G√©n√©ration des op√©rations CRUD
            {
                type: 'command',
                label: 'G√©n√©ration CRUD',
                command: 'node',
                args: [
                    path.join(process.cwd(), 'cli.js'),
                    'crud',
                    '--entity=Product'
                ]
            },
            // Ajout fonctionnalit√© de recherche
            {
                type: 'command',
                label: 'Ajout fonctionnalit√© de recherche',
                command: 'node',
                args: [
                    path.join(process.cwd(), 'cli.js'),
                    'search',
                    '--entity=Product'
                ]
            },
            // V√©rification des fichiers et structure
            {
                type: 'verify',
                label: 'V√©rification des fichiers g√©n√©r√©s',
                files: [
                    'build.gradle',
                    'gradlew',
                    'src/main/java/com/example/angularpostgres/entity/Product.java',
                    'src/main/java/com/example/angularpostgres/controller/ProductController.java',
                    'src/main/java/com/example/angularpostgres/repository/ProductRepository.java',
                    'src/main/java/com/example/angularpostgres/service/ProductService.java',
                    'src/main/java/com/example/angularpostgres/controller/ProductSearchController.java',
                    'src/main/resources/application.properties'
                ]
            },
            // Compilation du projet Java
            {
                type: 'build',
                label: 'Compilation du projet Java',
                command: process.platform === 'win32' ? 'gradlew.bat' : './gradlew',
                args: ['compileJava'],
                successMessage: 'BUILD SUCCESSFUL'
            }
        ]
    }
];

// Fonction pour ex√©cuter une commande shell
function runCommand(command, args, options = {}) {
    console.log(chalk.cyan(`Ex√©cution de: ${command} ${args.join(' ')}`));

    return new Promise((resolve, reject) => {
        const child = spawn(command, args, {
            stdio: options.captureOutput ? 'pipe' : 'inherit',
            ...options
        });

        let stdout = '';
        let stderr = '';

        if (options.captureOutput) {
            child.stdout.on('data', (data) => {
                stdout += data.toString();
            });

            child.stderr.on('data', (data) => {
                stderr += data.toString();
            });
        }

        child.on('close', (code) => {
            if (code !== 0) {
                reject({
                    code,
                    stdout,
                    stderr,
                    message: `La commande a √©chou√© avec le code: ${code}`
                });
            } else {
                resolve({
                    stdout,
                    stderr
                });
            }
        });
    });
}

// Fonction pour v√©rifier l'existence de fichiers
function verifyFiles(baseDir, files) {
    console.log(chalk.blue(`\nüîç V√©rification des fichiers g√©n√©r√©s...`));

    const missingFiles = [];

    for (const file of files) {
        const filePath = path.join(baseDir, file);

        if (!fs.existsSync(filePath)) {
            console.error(chalk.red(`‚ùå Fichier manquant: ${file}`));
            missingFiles.push(file);
        } else {
            console.log(chalk.green(`‚úÖ Fichier trouv√©: ${file}`));
        }
    }

    return missingFiles.length === 0;
}

// Fonction pour ex√©cuter une √©tape de test
async function runStep(step, workDir) {
    console.log(chalk.green(`\nüîß Ex√©cution de l'√©tape: ${step.label}`));

    try {
        process.chdir(workDir);

        if (step.type === 'command') {
            await runCommand(step.command, step.args);
            return true;
        }
        else if (step.type === 'verify') {
            return verifyFiles(workDir, step.files);
        }
        else if (step.type === 'build') {
            const result = await runCommand(step.command, step.args, { captureOutput: true });

            // Si un message de succ√®s est attendu, v√©rifiez qu'il est pr√©sent
            if (step.successMessage && !result.stdout.includes(step.successMessage)) {
                console.error(chalk.red(`‚ùå Message de succ√®s "${step.successMessage}" non trouv√© dans la sortie.`));
                return false;
            }

            return true;
        }

        console.error(chalk.red(`‚ùå Type d'√©tape inconnu: ${step.type}`));
        return false;

    } catch (error) {
        console.error(chalk.red(`‚ùå Erreur lors de l'√©tape ${step.label}:`), error.message || error);

        if (error.stdout) {
            console.error(chalk.yellow('Sortie standard:'));
            console.error(error.stdout.slice(-1000)); // Limiter √† 1000 caract√®res
        }

        if (error.stderr) {
            console.error(chalk.yellow('Sortie d\'erreur:'));
            console.error(error.stderr.slice(-1000)); // Limiter √† 1000 caract√®res
        }

        return false;
    }
}

// Fonction pour ex√©cuter un cas d'utilisation
async function runUseCase(useCase) {
    console.log(chalk.blue(`\nüöÄ Test du cas d'utilisation: ${useCase.name}`));
    console.log(chalk.blue(`üìù ${useCase.description}`));

    // Cr√©er un dossier sp√©cifique pour ce cas d'utilisation
    const useCaseDir = path.join(TEST_DIR, useCase.name);
    fs.mkdirSync(useCaseDir, { recursive: true });

    // Ex√©cuter chaque √©tape
    let allStepsSucceeded = true;

    for (const step of useCase.steps) {
        const success = await runStep(step, useCaseDir);

        if (!success) {
            allStepsSucceeded = false;
            console.error(chalk.red(`‚ùå √âchec √† l'√©tape: ${step.label}`));
            break;
        }
    }

    return allStepsSucceeded;
}

// Fonction principale
async function runTests() {
    console.log(chalk.blue(`\nüß™ Ex√©cution de ${useCases.length} tests end-to-end...`));

    const results = {};

    for (const useCase of useCases) {
        try {
            const success = await runUseCase(useCase);
            results[useCase.name] = success;
        } catch (error) {
            console.error(chalk.red(`‚ùå Erreur lors du test de ${useCase.name}:`), error);
            results[useCase.name] = false;
        }
    }

    // Afficher les r√©sultats
    console.log(chalk.blue('\nüìä R√©sultats des tests end-to-end:'));
    let allTestsPassed = true;

    for (const [name, success] of Object.entries(results)) {
        if (success) {
            console.log(chalk.green(`‚úÖ ${name}: SUCC√àS`));
        } else {
            console.log(chalk.red(`‚ùå ${name}: √âCHEC`));
            allTestsPassed = false;
        }
    }

    if (allTestsPassed) {
        console.log(chalk.green('\nüéâ Tous les tests end-to-end ont r√©ussi!'));
        process.exit(0);
    } else {
        console.log(chalk.red('\n‚ùå Certains tests end-to-end ont √©chou√©.'));
        process.exit(1);
    }
}

// Ex√©cuter les tests
runTests().catch((error) => {
    console.error(chalk.red('‚ùå Erreur fatale dans le script de test:'), error);
    process.exit(1);
});
