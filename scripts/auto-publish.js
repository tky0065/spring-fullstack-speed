#!/usr/bin/env node
/**
 * Script de publication automatique pour Spring-Fullstack-Speed
 * Ce script automatise le processus de publication d'une nouvelle version:
 * 1. V√©rifie que le code est propre (pas de changements non commit√©s)
 * 2. Ex√©cute les tests
 * 3. Met √† jour le num√©ro de version
 * 4. G√©n√®re le changelog
 * 5. Construit le package
 * 6. Publie sur npm
 * 7. Cr√©e un tag Git et pousse vers GitHub
 */

import { spawnSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import readline from 'readline';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.resolve(__dirname, '..');

// Fonction pour cr√©er une interface readline
function createInterface() {
  return readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
}

// Fonction pour ex√©cuter une commande shell
function execCommand(command, args, options = {}) {
  console.log(`Ex√©cution de: ${command} ${args.join(' ')}`);
  const result = spawnSync(command, args, {
    stdio: 'inherit',
    ...options,
    encoding: 'utf8'
  });

  if (result.error) {
    console.error(`Erreur lors de l'ex√©cution de la commande: ${result.error.message}`);
    process.exit(1);
  }

  if (result.status !== 0) {
    console.error(`La commande a √©chou√© avec le code: ${result.status}`);
    process.exit(result.status);
  }

  return result;
}

// V√©rifier que le repo Git est propre
function checkGitStatus() {
  console.log('\nüîç V√©rification du statut Git...');
  const result = spawnSync('git', ['status', '--porcelain'], { encoding: 'utf8' });

  if (result.stdout.trim() !== '') {
    console.error('‚ùå Le r√©pertoire de travail n\'est pas propre. Veuillez commiter ou stasher vos changements avant de publier.');
    process.exit(1);
  }

  console.log('‚úÖ Le r√©pertoire de travail est propre.');
}

// Lire le package.json
function readPackageJson() {
  const packageJsonPath = path.join(rootDir, 'package.json');
  return JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
}

// Mettre √† jour la version dans package.json
function updateVersion(version) {
  console.log(`\nüìù Mise √† jour de la version √† ${version}...`);
  const packageJsonPath = path.join(rootDir, 'package.json');
  const packageJson = readPackageJson();

  const oldVersion = packageJson.version;
  packageJson.version = version;

  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2) + '\n');
  console.log(`‚úÖ Version mise √† jour de ${oldVersion} √† ${version}`);
}

// Mettre √† jour le CHANGELOG.md
function updateChangelog(version) {
  console.log('\nüìù Mise √† jour du CHANGELOG...');
  const changelogPath = path.join(rootDir, 'CHANGELOG.md');

  // Lire les commits depuis la derni√®re version
  const result = spawnSync('git', ['log', `v${readPackageJson().version}..HEAD`, '--pretty=format:- %s'], { encoding: 'utf8' });
  const commits = result.stdout.trim();

  if (!commits) {
    console.warn('‚ö†Ô∏è Aucun commit trouv√© depuis la derni√®re version.');
    return;
  }

  const today = new Date().toISOString().split('T')[0];
  const changelogEntry = `\n## [${version}] - ${today}\n\n${commits}\n`;

  if (fs.existsSync(changelogPath)) {
    let changelog = fs.readFileSync(changelogPath, 'utf8');

    // Trouver l'emplacement o√π ins√©rer la nouvelle entr√©e (apr√®s le titre)
    const insertPosition = changelog.indexOf('\n## ');

    if (insertPosition !== -1) {
      changelog = changelog.slice(0, insertPosition) + changelogEntry + changelog.slice(insertPosition);
    } else {
      changelog += changelogEntry;
    }

    fs.writeFileSync(changelogPath, changelog);
  } else {
    // Cr√©er un nouveau changelog si inexistant
    const changelog = `# Changelog\nTous les changements notables apport√©s √† ce projet seront document√©s dans ce fichier.\n${changelogEntry}`;
    fs.writeFileSync(changelogPath, changelog);
  }

  console.log('‚úÖ CHANGELOG mis √† jour.');
}

// Ex√©cuter les tests
function runTests() {
  console.log('\nüß™ Ex√©cution des tests...');
  execCommand('npm', ['test']);
  console.log('‚úÖ Tests r√©ussis.');
}

// Construire le package
function buildPackage() {
  console.log('\nüî® Construction du package...');
  execCommand('npm', ['run', 'build']);
  console.log('‚úÖ Package construit.');
}

// Publier sur npm
function publishToNpm(tag) {
  console.log(`\nüöÄ Publication sur npm avec le tag '${tag}'...`);
  execCommand('npm', ['publish', `--tag=${tag}`]);
  console.log('‚úÖ Publication sur npm r√©ussie.');
}

// Cr√©er un tag Git et pousser
function createGitTagAndPush(version) {
  console.log('\nüè∑Ô∏è Cr√©ation du tag Git...');
  execCommand('git', ['add', 'package.json', 'CHANGELOG.md']);
  execCommand('git', ['commit', '-m', `chore: release version ${version}`]);
  execCommand('git', ['tag', `v${version}`]);

  console.log('\nüì§ Pouss√©e des changements et tags...');
  execCommand('git', ['push']);
  execCommand('git', ['push', '--tags']);

  console.log('‚úÖ Tag Git cr√©√© et pouss√©.');
}

// Point d'entr√©e principal
async function main() {
  try {
    const currentVersion = readPackageJson().version;
    console.log(`\nüì¶ Publication de Spring-Fullstack-Speed`);
    console.log(`Version actuelle: ${currentVersion}`);

    checkGitStatus();

    const rl = createInterface();

    // Demander le type de version
    console.log('\nType de version:');
    console.log('1) patch (1.0.1 -> 1.0.2)');
    console.log('2) minor (1.0.1 -> 1.1.0)');
    console.log('3) major (1.0.1 -> 2.0.0)');

    const question = (query) => new Promise(resolve => rl.question(query, resolve));

    const versionType = await question('\nChoisissez le type de version (1-3): ');

    // D√©terminer la nouvelle version
    const [major, minor, patch] = currentVersion.split('.').map(Number);
    let newVersion;

    switch (versionType) {
      case '1':
        newVersion = `${major}.${minor}.${patch + 1}`;
        break;
      case '2':
        newVersion = `${major}.${minor + 1}.0`;
        break;
      case '3':
        newVersion = `${major + 1}.0.0`;
        break;
      default:
        console.error('‚ùå Type de version invalide. Arr√™t de la publication.');
        process.exit(1);
    }

    // Confirmer la nouvelle version
    const confirmVersion = await question(`\nConfirmez-vous la publication de la version ${newVersion}? (o/n): `);

    if (confirmVersion.toLowerCase() !== 'o') {
      console.log('‚ùå Publication annul√©e.');
      process.exit(0);
    }

    // Demander le tag npm (latest, beta, etc.)
    const npmTag = await question('\nTag npm (latest, beta, alpha, etc.): ');

    rl.close();

    // Ex√©cuter le processus de publication
    runTests();
    updateVersion(newVersion);
    updateChangelog(newVersion);
    buildPackage();
    publishToNpm(npmTag);
    createGitTagAndPush(newVersion);

    console.log(`\nüéâ Publication de la version ${newVersion} termin√©e avec succ√®s!`);

  } catch (error) {
    console.error(`\n‚ùå Erreur lors de la publication: ${error.message}`);
    process.exit(1);
  }
}

main();
