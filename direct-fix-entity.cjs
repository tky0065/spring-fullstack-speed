#!/usr/bin/env node

/**
 * Script de correction directe pour le g√©n√©rateur d'entit√©s
 * Ce script modifie directement le fichier JavaScript compil√©
 */

const fs = require('fs');
const path = require('path');

console.log("üîß Correction directe du g√©n√©rateur d'entit√©s");

// Chemin vers le fichier JavaScript compil√©
const jsFilePath = path.join(__dirname, 'dist/generators/entity/index.js');
const backupPath = path.join(__dirname, 'dist/generators/entity/index.js.bak');

// V√©rifier que le fichier existe
if (!fs.existsSync(jsFilePath)) {
  console.error(`‚ùå Fichier introuvable: ${jsFilePath}`);
  process.exit(1);
}

// Cr√©er une sauvegarde
console.log(`üìã Cr√©ation d'une sauvegarde: ${backupPath}`);
fs.copyFileSync(jsFilePath, backupPath);

// Lire le contenu du fichier
console.log(`üìÑ Lecture du fichier: ${jsFilePath}`);
let content = fs.readFileSync(jsFilePath, 'utf8');

// Fonction simple qui remplace la m√©thode writing par une version fonctionnelle
function patchWritingMethod(fileContent) {
  console.log("üîç Recherche de la m√©thode writing()...");

  // On cherche le d√©but de la m√©thode writing
  const writingMethodRegex = /async\s+writing\(\)\s*{/;
  const match = fileContent.match(writingMethodRegex);

  if (!match) {
    console.error("‚ùå M√©thode writing() non trouv√©e dans le fichier");
    return fileContent;
  }

  console.log("‚úì M√©thode writing() trouv√©e");
  const writingMethodStartIndex = match.index;

  // Trouver la fin de la m√©thode writing
  let braceCount = 0;
  let writingMethodEndIndex = writingMethodStartIndex;
  let insideMethod = false;

  for (let i = writingMethodStartIndex; i < fileContent.length; i++) {
    const char = fileContent[i];

    if (char === '{') {
      braceCount++;
      insideMethod = true;
    } else if (char === '}') {
      braceCount--;
    }

    if (insideMethod && braceCount === 0) {
      writingMethodEndIndex = i + 1;
      break;
    }
  }

  console.log(`üìå M√©thode writing() localis√©e de l'index ${writingMethodStartIndex} √† ${writingMethodEndIndex}`);

  // Nouvelle impl√©mentation de la m√©thode writing
  const fixedWritingMethod = `async writing() {
    try {
      console.log("[PATCHED] Using fixed writing() method");
      
      // S'assurer que les champs sont bien d√©finis
      if (!this.entityFields || this.entityFields.length === 0) {
        this.log(chalk.yellow("[DEBUG] writing() - Appel de askForFields() car aucun champ d√©fini"));
        await this.askForFields();
      }

      // Extraire et s√©curiser les valeurs importantes
      const entityName = this.answers.entityName || 'Example';
      const packageName = this.answers.packageName || 'com.example.fullstack';
      this.log(chalk.yellow('[DEBUG] Utilisation du package: ' + packageName));

      // D√©finir directement les packages
      const entityPackage = packageName + '.entity';
      const repositoryPackage = packageName + '.repository';
      const servicePackage = packageName + '.service';
      const controllerPackage = packageName + '.controller';
      const dtoPackage = packageName + '.dto';

      // G√©n√©rer les chemins des r√©pertoires
      const basePath = "src/main/java";
      const entityPath = entityPackage.replace(/\\./g, '/');
      const repositoryPath = repositoryPackage.replace(/\\./g, '/');
      const servicePath = servicePackage.replace(/\\./g, '/');
      const controllerPath = controllerPackage.replace(/\\./g, '/');
      const dtoPath = dtoPackage.replace(/\\./g, '/');

      // Chemins complets des r√©pertoires
      const entityDir = path.join(basePath, entityPath);
      const repositoryDir = path.join(basePath, repositoryPath);
      const serviceDir = path.join(basePath, servicePath);
      const controllerDir = path.join(basePath, controllerPath);
      const dtoDir = path.join(basePath, dtoPath);

      this.log(chalk.yellow('[DEBUG] R√©pertoires g√©n√©r√©s:'));
      this.log(chalk.yellow('  - entityDir: ' + entityDir));

      // Cr√©ation des r√©pertoires avec fs.mkdirSync directement
      const ensureDirExists = (dir) => {
        if (!fs.existsSync(dir)) {
          fs.mkdirSync(dir, { recursive: true });
          this.log(chalk.yellow('üìÅ Cr√©ation du r√©pertoire: ' + dir));
        } else {
          this.log(chalk.yellow('üìÅ R√©pertoire existe d√©j√†: ' + dir));
        }
      };

      // Cr√©er les r√©pertoires n√©cessaires
      ensureDirExists(entityDir);
      if (this.answers.generateRepository) ensureDirExists(repositoryDir);
      if (this.answers.generateService) ensureDirExists(serviceDir);
      if (this.answers.generateController) ensureDirExists(controllerDir);
      if (this.answers.generateDto) ensureDirExists(dtoDir);

      // Trouver les chemins des templates
      const templatesDir = path.join(__dirname, 'templates');
      const entityTemplate = path.join(templatesDir, 'Entity.java.ejs');
      const repositoryTemplate = path.join(templatesDir, 'Repository.java.ejs');
      const serviceTemplate = path.join(templatesDir, 'Service.java.ejs');
      const serviceImplTemplate = path.join(templatesDir, 'ServiceImpl.java.ejs');
      const controllerTemplate = path.join(templatesDir, 'Controller.java.ejs');
      const dtoTemplate = path.join(templatesDir, 'EntityDTO.java.ejs');

      this.log(chalk.yellow('[DEBUG] Templates - chemins directs:'));
      this.log(chalk.yellow('  - templatesDir: ' + templatesDir));
      this.log(chalk.yellow('  - entityTemplate: ' + entityTemplate));

      // Pr√©parer les donn√©es pour les templates
      const templateData = {
        entityName,
        packageName: entityPackage,
        fields: this.entityFields,
        auditable: this.answers.auditable,
        dateTimeImport: this.hasDateTimeFields(),
        bigDecimalImport: this.hasBigDecimalFields(),
      };

      this.log("");
      this.log(chalk.blue("‚û§ ") + chalk.bold("G√âN√âRATION DES FICHIERS"));
      this.log(chalk.gray("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"));

      // G√©n√©rer les fichiers directement avec copyTpl
      try {
        // Entity
        this.fs.copyTpl(
          entityTemplate,
          this.destinationPath(path.join(entityDir, entityName + '.java')),
          templateData
        );
        this.log(chalk.green('‚úÖ Entit√© ' + entityName + '.java g√©n√©r√©e'));

        // Repository
        if (this.answers.generateRepository) {
          this.fs.copyTpl(
            repositoryTemplate,
            this.destinationPath(path.join(repositoryDir, entityName + 'Repository.java')),
            {
              ...templateData,
              packageName: repositoryPackage,
              entityPackageName: entityPackage
            }
          );
          this.log(chalk.green('‚úÖ Repository ' + entityName + 'Repository.java g√©n√©r√©'));
        }

        // Service
        if (this.answers.generateService) {
          this.fs.copyTpl(
            serviceTemplate,
            this.destinationPath(path.join(serviceDir, entityName + 'Service.java')),
            {
              ...templateData,
              packageName: servicePackage,
              entityPackageName: entityPackage,
              repositoryPackageName: repositoryPackage
            }
          );
          this.fs.copyTpl(
            serviceImplTemplate,
            this.destinationPath(path.join(serviceDir, entityName + 'ServiceImpl.java')),
            {
              ...templateData,
              packageName: servicePackage,
              entityPackageName: entityPackage,
              repositoryPackageName: repositoryPackage
            }
          );
          this.log(chalk.green('‚úÖ Service ' + entityName + 'Service.java et impl√©mentation g√©n√©r√©s'));
        }

        // Controller
        if (this.answers.generateController) {
          this.fs.copyTpl(
            controllerTemplate,
            this.destinationPath(path.join(controllerDir, entityName + 'Controller.java')),
            {
              ...templateData,
              packageName: controllerPackage,
              entityPackageName: entityPackage,
              servicePackageName: servicePackage,
              dtoPackageName: dtoPackage,
              useDto: this.answers.generateDto,
              entityNamePlural: pluralize(entityName),
              entityNameLower: entityName.charAt(0).toLowerCase() + entityName.slice(1)
            }
          );
          this.log(chalk.green('‚úÖ Controller ' + entityName + 'Controller.java g√©n√©r√©'));
        }

        // DTO
        if (this.answers.generateDto) {
          this.fs.copyTpl(
            dtoTemplate,
            this.destinationPath(path.join(dtoDir, entityName + 'DTO.java')),
            {
              ...templateData,
              packageName: dtoPackage,
              entityPackageName: entityPackage
            }
          );
          this.log(chalk.green('‚úÖ DTO ' + entityName + 'DTO.java g√©n√©r√©'));
        }

        this.log("");
        this.log(chalk.green('‚úÖ G√©n√©ration de l\\'entit√© ' + entityName + ' et de ses composants termin√©e avec succ√®s!'));
      } catch (error) {
        this.log(chalk.red('‚ùå Erreur lors de la g√©n√©ration des fichiers: ' + error));
        if (error.stack) {
          this.log(chalk.red('Stack trace: ' + error.stack));
        }
      }
    } catch (error) {
      this.log(chalk.red('‚ùå Erreur lors de la g√©n√©ration des fichiers: ' + error));
      if (error.stack) {
        this.log(chalk.red('Stack trace: ' + error.stack));
      }
    }
  }`;

  // Remplacer la m√©thode originale par la version corrig√©e
  const newContent = fileContent.substring(0, writingMethodStartIndex) +
                     fixedWritingMethod +
                     fileContent.substring(writingMethodEndIndex);

  console.log("‚úÖ M√©thode writing() remplac√©e avec succ√®s");
  return newContent;
}

// Application du patch
console.log("üîß Application du patch...");
let patchedContent = patchWritingMethod(content);
fs.writeFileSync(jsFilePath, patchedContent);

console.log("‚úÖ Patch appliqu√© avec succ√®s");
console.log("üöÄ Vous pouvez maintenant tester la commande 'sfs e'");
