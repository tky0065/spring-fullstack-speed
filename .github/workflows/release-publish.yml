name: Release & Publish

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type de version (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      npm_tag:
        description: 'Tag npm (latest, beta, alpha)'
        required: true
        default: 'latest'
        type: choice
        options:
          - latest
          - beta
          - alpha
          - next

jobs:
  test_and_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org/'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build
        run: npm run build

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update version
        id: version
        run: |
          # Déterminer la nouvelle version basée sur l'entrée
          VERSION_TYPE=${{ github.event.inputs.version_type }}
          
          # Lire la version actuelle
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Séparer major.minor.patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Calculer la nouvelle version
          if [ "$VERSION_TYPE" = "major" ]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif [ "$VERSION_TYPE" = "minor" ]; then
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
          else
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          fi
          
          # Mettre à jour la version
          npm version $NEW_VERSION --no-git-tag-version
          
          # Générer le changelog
          npx conventional-changelog-cli -p angular -i CHANGELOG.md -s
          
          # Enregistrer la version pour les étapes suivantes
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit changes
        run: |
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore(release): version ${{ steps.version.outputs.new_version }}"

      - name: Create tag
        run: git tag -a v${{ steps.version.outputs.new_version }} -m "Version ${{ steps.version.outputs.new_version }}"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
          tags: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: Version ${{ steps.version.outputs.new_version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to npm
        run: npm publish --tag ${{ github.event.inputs.npm_tag }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
